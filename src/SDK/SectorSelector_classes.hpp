#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SectorSelector

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class SectorSelector.TargetMeleeSectorComponent
// 0x00B0 (0x0150 - 0x00A0)
class UTargetMeleeSectorComponent : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumSectors;                                        // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TraceRadius;                                       // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x78];                                      // 0x00D8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsHandlesEqual(const struct FSectorSelectionHandle& Handle1, const struct FSectorSelectionHandle& Handle2);
	static bool IsHandleValid(const struct FSectorSelectionHandle& Handle);

	struct FSectorSelectionHandle ClaimSector(int32 SectorId);
	struct FSectorSelectionHandle ClaimSectorsByMask(int64 RequestedBitmaskOfOccupiedSectors, bool bClaimIfObstructed, bool bForceClaim);
	struct FSectorSelectionHandle ClaimSectorsInRange(int32 MinIndex, int32 MaxIndex);
	bool ReleaseSector(const struct FSectorSelectionHandle& Handle);

	bool FindDesiredSectorForPathBlueprint(struct FSelectedSector* SelectedSector, class UNavigationPath* Path, int32 SectorsNum) const;
	bool IsAllSectorsFree(int64 SectorsBitmask) const;
	bool IsAllSectorsFreeIfRemove(int64 SectorsBitmask, int64 RemoveBitmask) const;
	bool IsAnyOfSectorsObstructed(int64 SectorsBitmask) const;
	bool IsLocationInsideSectorWithPrecision(const struct FVector& Location, const int64 SectorsBitmask, float AnglePrecision) const;
	bool IsSectorFree(int32 SectorId) const;
	bool IsSectorObstructed(int32 SectorId) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TargetMeleeSectorComponent">();
	}
	static class UTargetMeleeSectorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTargetMeleeSectorComponent>();
	}
};
static_assert(alignof(UTargetMeleeSectorComponent) == 0x000008, "Wrong alignment on UTargetMeleeSectorComponent");
static_assert(sizeof(UTargetMeleeSectorComponent) == 0x000150, "Wrong size on UTargetMeleeSectorComponent");
static_assert(offsetof(UTargetMeleeSectorComponent, NumSectors) == 0x0000D0, "Member 'UTargetMeleeSectorComponent::NumSectors' has a wrong offset!");
static_assert(offsetof(UTargetMeleeSectorComponent, TraceRadius) == 0x0000D4, "Member 'UTargetMeleeSectorComponent::TraceRadius' has a wrong offset!");

}

