#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SectorSelector

#include "Basic.hpp"

#include "SectorSelector_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SectorSelector.TargetMeleeSectorComponent.IsHandlesEqual
// 0x000C (0x000C - 0x0000)
struct TargetMeleeSectorComponent_IsHandlesEqual final
{
public:
	struct FSectorSelectionHandle                 Handle1;                                           // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSectorSelectionHandle                 Handle2;                                           // 0x0004(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsHandlesEqual) == 0x000004, "Wrong alignment on TargetMeleeSectorComponent_IsHandlesEqual");
static_assert(sizeof(TargetMeleeSectorComponent_IsHandlesEqual) == 0x00000C, "Wrong size on TargetMeleeSectorComponent_IsHandlesEqual");
static_assert(offsetof(TargetMeleeSectorComponent_IsHandlesEqual, Handle1) == 0x000000, "Member 'TargetMeleeSectorComponent_IsHandlesEqual::Handle1' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsHandlesEqual, Handle2) == 0x000004, "Member 'TargetMeleeSectorComponent_IsHandlesEqual::Handle2' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsHandlesEqual, ReturnValue) == 0x000008, "Member 'TargetMeleeSectorComponent_IsHandlesEqual::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.IsHandleValid
// 0x0008 (0x0008 - 0x0000)
struct TargetMeleeSectorComponent_IsHandleValid final
{
public:
	struct FSectorSelectionHandle                 Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsHandleValid) == 0x000004, "Wrong alignment on TargetMeleeSectorComponent_IsHandleValid");
static_assert(sizeof(TargetMeleeSectorComponent_IsHandleValid) == 0x000008, "Wrong size on TargetMeleeSectorComponent_IsHandleValid");
static_assert(offsetof(TargetMeleeSectorComponent_IsHandleValid, Handle) == 0x000000, "Member 'TargetMeleeSectorComponent_IsHandleValid::Handle' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsHandleValid, ReturnValue) == 0x000004, "Member 'TargetMeleeSectorComponent_IsHandleValid::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.ClaimSector
// 0x0008 (0x0008 - 0x0000)
struct TargetMeleeSectorComponent_ClaimSector final
{
public:
	int32                                         SectorId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSectorSelectionHandle                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetMeleeSectorComponent_ClaimSector) == 0x000004, "Wrong alignment on TargetMeleeSectorComponent_ClaimSector");
static_assert(sizeof(TargetMeleeSectorComponent_ClaimSector) == 0x000008, "Wrong size on TargetMeleeSectorComponent_ClaimSector");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSector, SectorId) == 0x000000, "Member 'TargetMeleeSectorComponent_ClaimSector::SectorId' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSector, ReturnValue) == 0x000004, "Member 'TargetMeleeSectorComponent_ClaimSector::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.ClaimSectorsByMask
// 0x0010 (0x0010 - 0x0000)
struct TargetMeleeSectorComponent_ClaimSectorsByMask final
{
public:
	int64                                         RequestedBitmaskOfOccupiedSectors;                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClaimIfObstructed;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceClaim;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSectorSelectionHandle                 ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetMeleeSectorComponent_ClaimSectorsByMask) == 0x000008, "Wrong alignment on TargetMeleeSectorComponent_ClaimSectorsByMask");
static_assert(sizeof(TargetMeleeSectorComponent_ClaimSectorsByMask) == 0x000010, "Wrong size on TargetMeleeSectorComponent_ClaimSectorsByMask");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSectorsByMask, RequestedBitmaskOfOccupiedSectors) == 0x000000, "Member 'TargetMeleeSectorComponent_ClaimSectorsByMask::RequestedBitmaskOfOccupiedSectors' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSectorsByMask, bClaimIfObstructed) == 0x000008, "Member 'TargetMeleeSectorComponent_ClaimSectorsByMask::bClaimIfObstructed' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSectorsByMask, bForceClaim) == 0x000009, "Member 'TargetMeleeSectorComponent_ClaimSectorsByMask::bForceClaim' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSectorsByMask, ReturnValue) == 0x00000C, "Member 'TargetMeleeSectorComponent_ClaimSectorsByMask::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.ClaimSectorsInRange
// 0x000C (0x000C - 0x0000)
struct TargetMeleeSectorComponent_ClaimSectorsInRange final
{
public:
	int32                                         MinIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSectorSelectionHandle                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TargetMeleeSectorComponent_ClaimSectorsInRange) == 0x000004, "Wrong alignment on TargetMeleeSectorComponent_ClaimSectorsInRange");
static_assert(sizeof(TargetMeleeSectorComponent_ClaimSectorsInRange) == 0x00000C, "Wrong size on TargetMeleeSectorComponent_ClaimSectorsInRange");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSectorsInRange, MinIndex) == 0x000000, "Member 'TargetMeleeSectorComponent_ClaimSectorsInRange::MinIndex' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSectorsInRange, MaxIndex) == 0x000004, "Member 'TargetMeleeSectorComponent_ClaimSectorsInRange::MaxIndex' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_ClaimSectorsInRange, ReturnValue) == 0x000008, "Member 'TargetMeleeSectorComponent_ClaimSectorsInRange::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.ReleaseSector
// 0x0008 (0x0008 - 0x0000)
struct TargetMeleeSectorComponent_ReleaseSector final
{
public:
	struct FSectorSelectionHandle                 Handle;                                            // 0x0000(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_ReleaseSector) == 0x000004, "Wrong alignment on TargetMeleeSectorComponent_ReleaseSector");
static_assert(sizeof(TargetMeleeSectorComponent_ReleaseSector) == 0x000008, "Wrong size on TargetMeleeSectorComponent_ReleaseSector");
static_assert(offsetof(TargetMeleeSectorComponent_ReleaseSector, Handle) == 0x000000, "Member 'TargetMeleeSectorComponent_ReleaseSector::Handle' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_ReleaseSector, ReturnValue) == 0x000004, "Member 'TargetMeleeSectorComponent_ReleaseSector::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.FindDesiredSectorForPathBlueprint
// 0x0020 (0x0020 - 0x0000)
struct TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint final
{
public:
	struct FSelectedSector                        SelectedSector;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UNavigationPath*                        Path;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectorsNum;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint) == 0x000008, "Wrong alignment on TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint");
static_assert(sizeof(TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint) == 0x000020, "Wrong size on TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint");
static_assert(offsetof(TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint, SelectedSector) == 0x000000, "Member 'TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint::SelectedSector' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint, Path) == 0x000010, "Member 'TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint::Path' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint, SectorsNum) == 0x000018, "Member 'TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint::SectorsNum' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint, ReturnValue) == 0x00001C, "Member 'TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.IsAllSectorsFree
// 0x0010 (0x0010 - 0x0000)
struct TargetMeleeSectorComponent_IsAllSectorsFree final
{
public:
	int64                                         SectorsBitmask;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsAllSectorsFree) == 0x000008, "Wrong alignment on TargetMeleeSectorComponent_IsAllSectorsFree");
static_assert(sizeof(TargetMeleeSectorComponent_IsAllSectorsFree) == 0x000010, "Wrong size on TargetMeleeSectorComponent_IsAllSectorsFree");
static_assert(offsetof(TargetMeleeSectorComponent_IsAllSectorsFree, SectorsBitmask) == 0x000000, "Member 'TargetMeleeSectorComponent_IsAllSectorsFree::SectorsBitmask' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsAllSectorsFree, ReturnValue) == 0x000008, "Member 'TargetMeleeSectorComponent_IsAllSectorsFree::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.IsAllSectorsFreeIfRemove
// 0x0018 (0x0018 - 0x0000)
struct TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove final
{
public:
	int64                                         SectorsBitmask;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         RemoveBitmask;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove) == 0x000008, "Wrong alignment on TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove");
static_assert(sizeof(TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove) == 0x000018, "Wrong size on TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove");
static_assert(offsetof(TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove, SectorsBitmask) == 0x000000, "Member 'TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove::SectorsBitmask' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove, RemoveBitmask) == 0x000008, "Member 'TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove::RemoveBitmask' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove, ReturnValue) == 0x000010, "Member 'TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.IsAnyOfSectorsObstructed
// 0x0010 (0x0010 - 0x0000)
struct TargetMeleeSectorComponent_IsAnyOfSectorsObstructed final
{
public:
	int64                                         SectorsBitmask;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsAnyOfSectorsObstructed) == 0x000008, "Wrong alignment on TargetMeleeSectorComponent_IsAnyOfSectorsObstructed");
static_assert(sizeof(TargetMeleeSectorComponent_IsAnyOfSectorsObstructed) == 0x000010, "Wrong size on TargetMeleeSectorComponent_IsAnyOfSectorsObstructed");
static_assert(offsetof(TargetMeleeSectorComponent_IsAnyOfSectorsObstructed, SectorsBitmask) == 0x000000, "Member 'TargetMeleeSectorComponent_IsAnyOfSectorsObstructed::SectorsBitmask' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsAnyOfSectorsObstructed, ReturnValue) == 0x000008, "Member 'TargetMeleeSectorComponent_IsAnyOfSectorsObstructed::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.IsLocationInsideSectorWithPrecision
// 0x0028 (0x0028 - 0x0000)
struct TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SectorsBitmask;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnglePrecision;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision) == 0x000008, "Wrong alignment on TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision");
static_assert(sizeof(TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision) == 0x000028, "Wrong size on TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision");
static_assert(offsetof(TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision, Location) == 0x000000, "Member 'TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision::Location' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision, SectorsBitmask) == 0x000018, "Member 'TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision::SectorsBitmask' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision, AnglePrecision) == 0x000020, "Member 'TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision::AnglePrecision' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision, ReturnValue) == 0x000024, "Member 'TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.IsSectorFree
// 0x0008 (0x0008 - 0x0000)
struct TargetMeleeSectorComponent_IsSectorFree final
{
public:
	int32                                         SectorId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsSectorFree) == 0x000004, "Wrong alignment on TargetMeleeSectorComponent_IsSectorFree");
static_assert(sizeof(TargetMeleeSectorComponent_IsSectorFree) == 0x000008, "Wrong size on TargetMeleeSectorComponent_IsSectorFree");
static_assert(offsetof(TargetMeleeSectorComponent_IsSectorFree, SectorId) == 0x000000, "Member 'TargetMeleeSectorComponent_IsSectorFree::SectorId' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsSectorFree, ReturnValue) == 0x000004, "Member 'TargetMeleeSectorComponent_IsSectorFree::ReturnValue' has a wrong offset!");

// Function SectorSelector.TargetMeleeSectorComponent.IsSectorObstructed
// 0x0008 (0x0008 - 0x0000)
struct TargetMeleeSectorComponent_IsSectorObstructed final
{
public:
	int32                                         SectorId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TargetMeleeSectorComponent_IsSectorObstructed) == 0x000004, "Wrong alignment on TargetMeleeSectorComponent_IsSectorObstructed");
static_assert(sizeof(TargetMeleeSectorComponent_IsSectorObstructed) == 0x000008, "Wrong size on TargetMeleeSectorComponent_IsSectorObstructed");
static_assert(offsetof(TargetMeleeSectorComponent_IsSectorObstructed, SectorId) == 0x000000, "Member 'TargetMeleeSectorComponent_IsSectorObstructed::SectorId' has a wrong offset!");
static_assert(offsetof(TargetMeleeSectorComponent_IsSectorObstructed, ReturnValue) == 0x000004, "Member 'TargetMeleeSectorComponent_IsSectorObstructed::ReturnValue' has a wrong offset!");

}

