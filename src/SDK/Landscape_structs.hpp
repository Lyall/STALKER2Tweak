#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Landscape

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum Landscape.EScaleMode
// NumValues: 0x0004
enum class EScaleMode : uint8
{
	Uniform                                  = 0,
	HorizontalUniform                        = 1,
	NonUniform                               = 2,
	EScaleMode_MAX                           = 3,
};

// Enum Landscape.ELandscapeSetupErrors
// NumValues: 0x0005
enum class ELandscapeSetupErrors : uint8
{
	LSE_None                                 = 0,
	LSE_NoLandscapeInfo                      = 1,
	LSE_CollsionXY                           = 2,
	LSE_NoLayerInfo                          = 3,
	LSE_MAX                                  = 4,
};

// Enum Landscape.ERTDrawingType
// NumValues: 0x0006
enum class ERTDrawingType : uint8
{
	RTAtlas                                  = 0,
	RTAtlasToNonAtlas                        = 1,
	RTNonAtlasToAtlas                        = 2,
	RTNonAtlas                               = 3,
	RTMips                                   = 4,
	ERTDrawingType_MAX                       = 5,
};

// Enum Landscape.EHeightmapRTType
// NumValues: 0x000E
enum class EHeightmapRTType : uint8
{
	HeightmapRT_CombinedAtlas                = 0,
	HeightmapRT_CombinedNonAtlas             = 1,
	HeightmapRT_Scratch1                     = 2,
	HeightmapRT_Scratch2                     = 3,
	HeightmapRT_Scratch3                     = 4,
	HeightmapRT_Mip1                         = 5,
	HeightmapRT_Mip2                         = 6,
	HeightmapRT_Mip3                         = 7,
	HeightmapRT_Mip4                         = 8,
	HeightmapRT_Mip5                         = 9,
	HeightmapRT_Mip6                         = 10,
	HeightmapRT_Mip7                         = 11,
	HeightmapRT_Count                        = 12,
	HeightmapRT_MAX                          = 13,
};

// Enum Landscape.EWeightmapRTType
// NumValues: 0x000E
enum class EWeightmapRTType : uint8
{
	WeightmapRT_Scratch_RGBA                 = 0,
	WeightmapRT_Scratch1                     = 1,
	WeightmapRT_Scratch2                     = 2,
	WeightmapRT_Scratch3                     = 3,
	WeightmapRT_Mip0                         = 4,
	WeightmapRT_Mip1                         = 5,
	WeightmapRT_Mip2                         = 6,
	WeightmapRT_Mip3                         = 7,
	WeightmapRT_Mip4                         = 8,
	WeightmapRT_Mip5                         = 9,
	WeightmapRT_Mip6                         = 10,
	WeightmapRT_Mip7                         = 11,
	WeightmapRT_Count                        = 12,
	WeightmapRT_MAX                          = 13,
};

// Enum Landscape.ELandscapeBlendMode
// NumValues: 0x0003
enum class ELandscapeBlendMode : uint8
{
	LSBM_AdditiveBlend                       = 0,
	LSBM_AlphaBlend                          = 1,
	LSBM_MAX                                 = 2,
};

// Enum Landscape.ELandscapeClearMode
// NumValues: 0x0004
enum class ELandscapeClearMode : uint8
{
	Clear_Weightmap                          = 1,
	Clear_Heightmap                          = 2,
	Clear_All                                = 3,
	Clear_MAX                                = 4,
};

// Enum Landscape.EFoliageGeneratorBiome
// NumValues: 0x0022
enum class EFoliageGeneratorBiome : uint8
{
	Unselected                               = 0,
	Biome_0                                  = 1,
	Biome_1                                  = 2,
	Biome_2                                  = 3,
	Biome_3                                  = 4,
	Biome_4                                  = 5,
	Biome_5                                  = 6,
	Biome_6                                  = 7,
	Biome_7                                  = 8,
	Biome_8                                  = 9,
	Biome_9                                  = 10,
	Biome_10                                 = 11,
	Biome_11                                 = 12,
	Biome_12                                 = 13,
	Biome_13                                 = 14,
	Biome_14                                 = 15,
	Biome_15                                 = 16,
	Biome_16                                 = 17,
	Biome_17                                 = 18,
	Biome_18                                 = 19,
	Biome_19                                 = 20,
	Biome_20                                 = 21,
	Biome_21                                 = 22,
	Biome_22                                 = 23,
	Biome_23                                 = 24,
	Biome_24                                 = 25,
	Biome_25                                 = 26,
	Biome_26                                 = 27,
	Biome_27                                 = 28,
	Biome_28                                 = 29,
	Biome_29                                 = 30,
	Biome_30                                 = 31,
	Biome_31                                 = 32,
	EFoliageGeneratorBiome_MAX               = 33,
};

// Enum Landscape.EFoliageGeneratorGrassLayer
// NumValues: 0x000A
enum class EFoliageGeneratorGrassLayer : uint8
{
	Unselected                               = 0,
	GrassLayer_0                             = 1,
	GrassLayer_1                             = 2,
	GrassLayer_2                             = 3,
	GrassLayer_3                             = 4,
	GrassLayer_4                             = 5,
	GrassLayer_5                             = 6,
	GrassLayer_6                             = 7,
	GrassLayer_7                             = 8,
	EFoliageGeneratorGrassLayer_MAX          = 9,
};

// Enum Landscape.EFoliageGeneratorFoliageMapLayer
// NumValues: 0x0012
enum class EFoliageGeneratorFoliageMapLayer : uint8
{
	Unselected                               = 0,
	FoliageMapLayer_0                        = 1,
	FoliageMapLayer_1                        = 2,
	FoliageMapLayer_2                        = 3,
	FoliageMapLayer_3                        = 4,
	FoliageMapLayer_4                        = 5,
	FoliageMapLayer_5                        = 6,
	FoliageMapLayer_6                        = 7,
	FoliageMapLayer_7                        = 8,
	FoliageMapLayer_8                        = 9,
	FoliageMapLayer_9                        = 10,
	FoliageMapLayer_10                       = 11,
	FoliageMapLayer_11                       = 12,
	FoliageMapLayer_12                       = 13,
	FoliageMapLayer_13                       = 14,
	FoliageMapLayer_14                       = 15,
	FoliageMapLayer_15                       = 16,
	EFoliageGeneratorFoliageMapLayer_MAX     = 17,
};

// Enum Landscape.ELandscapeGizmoType
// NumValues: 0x0004
enum class ELandscapeGizmoType : uint8
{
	LGT_None                                 = 0,
	LGT_Height                               = 1,
	LGT_Weight                               = 2,
	LGT_MAX                                  = 3,
};

// Enum Landscape.EGrassScaling
// NumValues: 0x0004
enum class EGrassScaling : uint8
{
	Uniform                                  = 0,
	Free                                     = 1,
	LockXY                                   = 2,
	EGrassScaling_MAX                        = 3,
};

// Enum Landscape.ELandscapeFoliageType
// NumValues: 0x0005
enum class ELandscapeFoliageType : uint8
{
	Trees                                    = 0,
	Bushes                                   = 1,
	Grass                                    = 2,
	LowGrass                                 = 3,
	ELandscapeFoliageType_MAX                = 4,
};

// Enum Landscape.ETreeType
// NumValues: 0x0004
enum class ETreeType : uint8
{
	Unknown                                  = 0,
	InnerTree                                = 1,
	OuterTree                                = 2,
	ETreeType_MAX                            = 3,
};

// Enum Landscape.ESplineModulationColorMask
// NumValues: 0x0005
enum class ESplineModulationColorMask : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Alpha                                    = 3,
	ESplineModulationColorMask_MAX           = 4,
};

// Enum Landscape.LandscapeSplineMeshOrientation
// NumValues: 0x0003
enum class ELandscapeSplineMeshOrientation : uint8
{
	LSMO_XUp                                 = 0,
	LSMO_YUp                                 = 1,
	LSMO_MAX                                 = 2,
};

// Enum Landscape.ELandscapeLayerBlendType
// NumValues: 0x0004
enum class ELandscapeLayerBlendType : uint8
{
	LB_WeightBlend                           = 0,
	LB_AlphaBlend                            = 1,
	LB_HeightBlend                           = 2,
	LB_MAX                                   = 3,
};

// Enum Landscape.ETerrainCoordMappingType
// NumValues: 0x0005
enum class ETerrainCoordMappingType : uint8
{
	TCMT_Auto                                = 0,
	TCMT_XY                                  = 1,
	TCMT_XZ                                  = 2,
	TCMT_YZ                                  = 3,
	TCMT_MAX                                 = 4,
};

// Enum Landscape.ELandscapeCustomizedCoordType
// NumValues: 0x0006
enum class ELandscapeCustomizedCoordType : uint8
{
	LCCT_None                                = 0,
	LCCT_CustomUV0                           = 1,
	LCCT_CustomUV1                           = 2,
	LCCT_CustomUV2                           = 3,
	LCCT_WeightMapUV                         = 4,
	LCCT_MAX                                 = 5,
};

// Enum Landscape.ELandscapeResizeMode
// NumValues: 0x0004
enum class ELandscapeResizeMode : uint8
{
	Resample                                 = 0,
	Clip                                     = 1,
	Expand                                   = 2,
	ELandscapeResizeMode_MAX                 = 3,
};

// Enum Landscape.ELandscapeImportAlphamapType
// NumValues: 0x0003
enum class ELandscapeImportAlphamapType : uint8
{
	Additive                                 = 0,
	Layered                                  = 1,
	ELandscapeImportAlphamapType_MAX         = 2,
};

// Enum Landscape.ELandscapeLayerPaintingRestriction
// NumValues: 0x0005
enum class ELandscapeLayerPaintingRestriction : uint8
{
	None                                     = 0,
	UseMaxLayers                             = 1,
	ExistingOnly                             = 2,
	UseComponentAllowList                    = 3,
	ELandscapeLayerPaintingRestriction_MAX   = 4,
};

// Enum Landscape.ELandscapeLayerDisplayMode
// NumValues: 0x0004
enum class ELandscapeLayerDisplayMode : uint8
{
	Default                                  = 0,
	Alphabetical                             = 1,
	UserSpecific                             = 2,
	ELandscapeLayerDisplayMode_MAX           = 3,
};

// Enum Landscape.ELandscapeLODFalloff
// NumValues: 0x0003
enum class ELandscapeLODFalloff : uint8
{
	Linear                                   = 0,
	SquareRoot                               = 1,
	ELandscapeLODFalloff_MAX                 = 2,
};

// ScriptStruct Landscape.CompressedTransformRanges
// 0x004C (0x004C - 0x0000)
struct FCompressedTransformRanges final
{
public:
	struct FRotator3f                             MinRotation;                                       // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator3f                             MaxRotation;                                       // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector3f                              MinScale;                                          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              MaxScale;                                          // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              MinPosition;                                       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              MaxPosition;                                       // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScaleMode                                    ScaleMode;                                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHeight8Bit;                                     // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCompressedTransformRanges) == 0x000004, "Wrong alignment on FCompressedTransformRanges");
static_assert(sizeof(FCompressedTransformRanges) == 0x00004C, "Wrong size on FCompressedTransformRanges");
static_assert(offsetof(FCompressedTransformRanges, MinRotation) == 0x000000, "Member 'FCompressedTransformRanges::MinRotation' has a wrong offset!");
static_assert(offsetof(FCompressedTransformRanges, MaxRotation) == 0x00000C, "Member 'FCompressedTransformRanges::MaxRotation' has a wrong offset!");
static_assert(offsetof(FCompressedTransformRanges, MinScale) == 0x000018, "Member 'FCompressedTransformRanges::MinScale' has a wrong offset!");
static_assert(offsetof(FCompressedTransformRanges, MaxScale) == 0x000024, "Member 'FCompressedTransformRanges::MaxScale' has a wrong offset!");
static_assert(offsetof(FCompressedTransformRanges, MinPosition) == 0x000030, "Member 'FCompressedTransformRanges::MinPosition' has a wrong offset!");
static_assert(offsetof(FCompressedTransformRanges, MaxPosition) == 0x00003C, "Member 'FCompressedTransformRanges::MaxPosition' has a wrong offset!");
static_assert(offsetof(FCompressedTransformRanges, ScaleMode) == 0x000048, "Member 'FCompressedTransformRanges::ScaleMode' has a wrong offset!");
static_assert(offsetof(FCompressedTransformRanges, bIsHeight8Bit) == 0x000049, "Member 'FCompressedTransformRanges::bIsHeight8Bit' has a wrong offset!");

// ScriptStruct Landscape.SubcomponentBakedFoliage
// 0x00C0 (0x00C0 - 0x0000)
struct FSubcomponentBakedFoliage final
{
public:
	TArray<uint32>                                TransformRanges;                                   // 0x0000(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	struct FCompressedTransformRanges             Ranges;                                            // 0x0010(0x004C)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InstancingRNGSeed;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumTransforms;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x5C];                                      // 0x0064(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubcomponentBakedFoliage) == 0x000008, "Wrong alignment on FSubcomponentBakedFoliage");
static_assert(sizeof(FSubcomponentBakedFoliage) == 0x0000C0, "Wrong size on FSubcomponentBakedFoliage");
static_assert(offsetof(FSubcomponentBakedFoliage, TransformRanges) == 0x000000, "Member 'FSubcomponentBakedFoliage::TransformRanges' has a wrong offset!");
static_assert(offsetof(FSubcomponentBakedFoliage, Ranges) == 0x000010, "Member 'FSubcomponentBakedFoliage::Ranges' has a wrong offset!");
static_assert(offsetof(FSubcomponentBakedFoliage, InstancingRNGSeed) == 0x00005C, "Member 'FSubcomponentBakedFoliage::InstancingRNGSeed' has a wrong offset!");
static_assert(offsetof(FSubcomponentBakedFoliage, NumTransforms) == 0x000060, "Member 'FSubcomponentBakedFoliage::NumTransforms' has a wrong offset!");

// ScriptStruct Landscape.LandscapeProxyMaterialOverride
// 0x0010 (0x0010 - 0x0000)
struct FLandscapeProxyMaterialOverride final
{
public:
	struct FPerPlatformInt                        LODIndex;                                          // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeProxyMaterialOverride) == 0x000008, "Wrong alignment on FLandscapeProxyMaterialOverride");
static_assert(sizeof(FLandscapeProxyMaterialOverride) == 0x000010, "Wrong size on FLandscapeProxyMaterialOverride");
static_assert(offsetof(FLandscapeProxyMaterialOverride, LODIndex) == 0x000000, "Member 'FLandscapeProxyMaterialOverride::LODIndex' has a wrong offset!");
static_assert(offsetof(FLandscapeProxyMaterialOverride, Material) == 0x000008, "Member 'FLandscapeProxyMaterialOverride::Material' has a wrong offset!");

// ScriptStruct Landscape.HISMOrISMBakedFoliage
// 0x0068 (0x0068 - 0x0000)
struct FHISMOrISMBakedFoliage final
{
public:
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0000(0x0030)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCullDistance;                                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndCullDistance;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFadeInDistance;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFadeInDistance;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCastsDynamicShadows;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastsContactShadows;                              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsDistanceLighting;                          // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCollision;                                     // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivesDecals;                                   // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x13];                                      // 0x0055(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHISMOrISMBakedFoliage) == 0x000008, "Wrong alignment on FHISMOrISMBakedFoliage");
static_assert(sizeof(FHISMOrISMBakedFoliage) == 0x000068, "Wrong size on FHISMOrISMBakedFoliage");
static_assert(offsetof(FHISMOrISMBakedFoliage, Mesh) == 0x000000, "Member 'FHISMOrISMBakedFoliage::Mesh' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, StartCullDistance) == 0x000030, "Member 'FHISMOrISMBakedFoliage::StartCullDistance' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, EndCullDistance) == 0x000034, "Member 'FHISMOrISMBakedFoliage::EndCullDistance' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, StartFadeInDistance) == 0x000038, "Member 'FHISMOrISMBakedFoliage::StartFadeInDistance' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, EndFadeInDistance) == 0x00003C, "Member 'FHISMOrISMBakedFoliage::EndFadeInDistance' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, bCastsDynamicShadows) == 0x000050, "Member 'FHISMOrISMBakedFoliage::bCastsDynamicShadows' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, bCastsContactShadows) == 0x000051, "Member 'FHISMOrISMBakedFoliage::bCastsContactShadows' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, bAffectsDistanceLighting) == 0x000052, "Member 'FHISMOrISMBakedFoliage::bAffectsDistanceLighting' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, bHasCollision) == 0x000053, "Member 'FHISMOrISMBakedFoliage::bHasCollision' has a wrong offset!");
static_assert(offsetof(FHISMOrISMBakedFoliage, bReceivesDecals) == 0x000054, "Member 'FHISMOrISMBakedFoliage::bReceivesDecals' has a wrong offset!");

// ScriptStruct Landscape.FoliageTypeBakedFoliage
// 0x0028 (0x0028 - 0x0000)
struct FFoliageTypeBakedFoliage final
{
public:
	uint32                                        ComponentSubdivisionFactor;                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DistantComponentSubdivisionFactor;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHISMOrISMBakedFoliage>         HISMsOrISMs;                                       // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxEndCullDistance;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistantEndCullDistance;                         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStartFadeInDistance;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageTypeBakedFoliage) == 0x000008, "Wrong alignment on FFoliageTypeBakedFoliage");
static_assert(sizeof(FFoliageTypeBakedFoliage) == 0x000028, "Wrong size on FFoliageTypeBakedFoliage");
static_assert(offsetof(FFoliageTypeBakedFoliage, ComponentSubdivisionFactor) == 0x000000, "Member 'FFoliageTypeBakedFoliage::ComponentSubdivisionFactor' has a wrong offset!");
static_assert(offsetof(FFoliageTypeBakedFoliage, DistantComponentSubdivisionFactor) == 0x000004, "Member 'FFoliageTypeBakedFoliage::DistantComponentSubdivisionFactor' has a wrong offset!");
static_assert(offsetof(FFoliageTypeBakedFoliage, HISMsOrISMs) == 0x000008, "Member 'FFoliageTypeBakedFoliage::HISMsOrISMs' has a wrong offset!");
static_assert(offsetof(FFoliageTypeBakedFoliage, MaxEndCullDistance) == 0x000018, "Member 'FFoliageTypeBakedFoliage::MaxEndCullDistance' has a wrong offset!");
static_assert(offsetof(FFoliageTypeBakedFoliage, MaxDistantEndCullDistance) == 0x00001C, "Member 'FFoliageTypeBakedFoliage::MaxDistantEndCullDistance' has a wrong offset!");
static_assert(offsetof(FFoliageTypeBakedFoliage, MinStartFadeInDistance) == 0x000020, "Member 'FFoliageTypeBakedFoliage::MinStartFadeInDistance' has a wrong offset!");

// ScriptStruct Landscape.BakedFoliage
// 0x0078 (0x0078 - 0x0000)
struct FBakedFoliage final
{
public:
	struct FFoliageTypeBakedFoliage               TreeBakedFoliage;                                  // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	struct FFoliageTypeBakedFoliage               BushBakedFoliage;                                  // 0x0028(0x0028)(NativeAccessSpecifierPublic)
	struct FFoliageTypeBakedFoliage               GrassBakedFoliage;                                 // 0x0050(0x0028)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FBakedFoliage) == 0x000008, "Wrong alignment on FBakedFoliage");
static_assert(sizeof(FBakedFoliage) == 0x000078, "Wrong size on FBakedFoliage");
static_assert(offsetof(FBakedFoliage, TreeBakedFoliage) == 0x000000, "Member 'FBakedFoliage::TreeBakedFoliage' has a wrong offset!");
static_assert(offsetof(FBakedFoliage, BushBakedFoliage) == 0x000028, "Member 'FBakedFoliage::BushBakedFoliage' has a wrong offset!");
static_assert(offsetof(FBakedFoliage, GrassBakedFoliage) == 0x000050, "Member 'FBakedFoliage::GrassBakedFoliage' has a wrong offset!");

// ScriptStruct Landscape.UInt8Interval
// 0x0002 (0x0002 - 0x0000)
struct FUInt8Interval final
{
public:
	uint8                                         LowerBound;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UpperBound;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUInt8Interval) == 0x000001, "Wrong alignment on FUInt8Interval");
static_assert(sizeof(FUInt8Interval) == 0x000002, "Wrong size on FUInt8Interval");
static_assert(offsetof(FUInt8Interval, LowerBound) == 0x000000, "Member 'FUInt8Interval::LowerBound' has a wrong offset!");
static_assert(offsetof(FUInt8Interval, UpperBound) == 0x000001, "Member 'FUInt8Interval::UpperBound' has a wrong offset!");

// ScriptStruct Landscape.CullDistance
// 0x0008 (0x0008 - 0x0000)
struct FCullDistance final
{
public:
	float                                         CullDistance;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullRange;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCullDistance) == 0x000004, "Wrong alignment on FCullDistance");
static_assert(sizeof(FCullDistance) == 0x000008, "Wrong size on FCullDistance");
static_assert(offsetof(FCullDistance, CullDistance) == 0x000000, "Member 'FCullDistance::CullDistance' has a wrong offset!");
static_assert(offsetof(FCullDistance, CullRange) == 0x000004, "Member 'FCullDistance::CullRange' has a wrong offset!");

// ScriptStruct Landscape.LayerMap
// 0x0018 (0x0018 - 0x0000)
struct FLayerMap final
{
public:
	class USRLEAsset*                             Texture;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileFactor;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         Range;                                             // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayerMap) == 0x000008, "Wrong alignment on FLayerMap");
static_assert(sizeof(FLayerMap) == 0x000018, "Wrong size on FLayerMap");
static_assert(offsetof(FLayerMap, Texture) == 0x000000, "Member 'FLayerMap::Texture' has a wrong offset!");
static_assert(offsetof(FLayerMap, TileFactor) == 0x000008, "Member 'FLayerMap::TileFactor' has a wrong offset!");
static_assert(offsetof(FLayerMap, Range) == 0x00000C, "Member 'FLayerMap::Range' has a wrong offset!");

// ScriptStruct Landscape.VarietyMap
// 0x0010 (0x0010 - 0x0000)
struct FVarietyMap final
{
public:
	class USRLEAsset*                             Texture;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileFactor;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapFactor;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVarietyMap) == 0x000008, "Wrong alignment on FVarietyMap");
static_assert(sizeof(FVarietyMap) == 0x000010, "Wrong size on FVarietyMap");
static_assert(offsetof(FVarietyMap, Texture) == 0x000000, "Member 'FVarietyMap::Texture' has a wrong offset!");
static_assert(offsetof(FVarietyMap, TileFactor) == 0x000008, "Member 'FVarietyMap::TileFactor' has a wrong offset!");
static_assert(offsetof(FVarietyMap, OverlapFactor) == 0x00000C, "Member 'FVarietyMap::OverlapFactor' has a wrong offset!");

// ScriptStruct Landscape.HeightFootprint
// 0x0010 (0x0010 - 0x0000)
struct FHeightFootprint final
{
public:
	float                                         Footprint;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideHoverAndSubmerge;                         // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hover;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Submerge;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeightFootprint) == 0x000004, "Wrong alignment on FHeightFootprint");
static_assert(sizeof(FHeightFootprint) == 0x000010, "Wrong size on FHeightFootprint");
static_assert(offsetof(FHeightFootprint, Footprint) == 0x000000, "Member 'FHeightFootprint::Footprint' has a wrong offset!");
static_assert(offsetof(FHeightFootprint, bOverrideHoverAndSubmerge) == 0x000004, "Member 'FHeightFootprint::bOverrideHoverAndSubmerge' has a wrong offset!");
static_assert(offsetof(FHeightFootprint, Hover) == 0x000008, "Member 'FHeightFootprint::Hover' has a wrong offset!");
static_assert(offsetof(FHeightFootprint, Submerge) == 0x00000C, "Member 'FHeightFootprint::Submerge' has a wrong offset!");

// ScriptStruct Landscape.GrassVarietyAdvanced
// 0x00D0 (0x00D0 - 0x0000)
struct FGrassVarietyAdvanced final
{
public:
	class UStaticMesh*                            GrassMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             OverrideMaterials;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                      GrassDensity;                                      // 0x0018(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseGrid;                                          // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlacementJitter;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        StartCullDistance;                                 // 0x0024(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformInt                        EndCullDistance;                                   // 0x0028(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         MinLOD;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGrassScaling                                 Scaling;                                           // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         ScaleX;                                            // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleY;                                            // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ScaleZ;                                            // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomRotation;                                    // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPitchRotation;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRollRotation;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpecificSlopeRotationPerAxis;                  // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         PitchRotation;                                     // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         RollRotation;                                      // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceAlignment;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrunkDiameter;                                     // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSlopeGroup;                               // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SlopeGroupIndex;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCastsDynamicShadows;                      // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastsDynamicShadows;                              // 0x007D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCastsContactShadows;                      // 0x007E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastsContactShadows;                              // 0x007F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLandscapeLightmap;                             // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0081(0x0001)(Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bReceivesDecals;                                   // 0x0082(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectDistanceFieldLighting;                      // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastDynamicShadow;                                // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastContactShadow;                                // 0x0085(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepInstanceBufferCPUCopy;                        // 0x0086(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_87[0x1];                                       // 0x0087(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        InstanceWorldPositionOffsetDisableDistance;        // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFoliageCollisionFootprint;                     // 0x008C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FoliageCollisionFootprint;                         // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFoliageCollisionCrownFootprint;                // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FoliageCollisionCrownFootprint;                    // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideGeometryCollisionFootprint;               // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeometryCollisionFootprint;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideGeometryCollisionCrownFootprint;          // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeometryCollisionCrownFootprint;                   // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHeightFootprint;                               // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHeightFootprint                       HeightFootprint;                                   // 0x00B0(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         GeneratorWeight;                                   // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         ZOffsetRandomInterval;                             // 0x00C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAffectsDistanceFieldLighting;             // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsDistanceFieldLighting;                     // 0x00CD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotSpawnOnMeshes;                               // 0x00CE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF[0x1];                                       // 0x00CF(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrassVarietyAdvanced) == 0x000008, "Wrong alignment on FGrassVarietyAdvanced");
static_assert(sizeof(FGrassVarietyAdvanced) == 0x0000D0, "Wrong size on FGrassVarietyAdvanced");
static_assert(offsetof(FGrassVarietyAdvanced, GrassMesh) == 0x000000, "Member 'FGrassVarietyAdvanced::GrassMesh' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, OverrideMaterials) == 0x000008, "Member 'FGrassVarietyAdvanced::OverrideMaterials' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, GrassDensity) == 0x000018, "Member 'FGrassVarietyAdvanced::GrassDensity' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bUseGrid) == 0x00001C, "Member 'FGrassVarietyAdvanced::bUseGrid' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, PlacementJitter) == 0x000020, "Member 'FGrassVarietyAdvanced::PlacementJitter' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, StartCullDistance) == 0x000024, "Member 'FGrassVarietyAdvanced::StartCullDistance' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, EndCullDistance) == 0x000028, "Member 'FGrassVarietyAdvanced::EndCullDistance' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, MinLOD) == 0x00002C, "Member 'FGrassVarietyAdvanced::MinLOD' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, Scaling) == 0x000030, "Member 'FGrassVarietyAdvanced::Scaling' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, ScaleX) == 0x000034, "Member 'FGrassVarietyAdvanced::ScaleX' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, ScaleY) == 0x00003C, "Member 'FGrassVarietyAdvanced::ScaleY' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, ScaleZ) == 0x000044, "Member 'FGrassVarietyAdvanced::ScaleZ' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, RandomRotation) == 0x00004C, "Member 'FGrassVarietyAdvanced::RandomRotation' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, MaxPitchRotation) == 0x000050, "Member 'FGrassVarietyAdvanced::MaxPitchRotation' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, MaxRollRotation) == 0x000054, "Member 'FGrassVarietyAdvanced::MaxRollRotation' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bUseSpecificSlopeRotationPerAxis) == 0x000058, "Member 'FGrassVarietyAdvanced::bUseSpecificSlopeRotationPerAxis' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, PitchRotation) == 0x00005C, "Member 'FGrassVarietyAdvanced::PitchRotation' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, RollRotation) == 0x000064, "Member 'FGrassVarietyAdvanced::RollRotation' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, SurfaceAlignment) == 0x00006C, "Member 'FGrassVarietyAdvanced::SurfaceAlignment' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, TrunkDiameter) == 0x000070, "Member 'FGrassVarietyAdvanced::TrunkDiameter' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bOverrideSlopeGroup) == 0x000074, "Member 'FGrassVarietyAdvanced::bOverrideSlopeGroup' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, SlopeGroupIndex) == 0x000078, "Member 'FGrassVarietyAdvanced::SlopeGroupIndex' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bOverrideCastsDynamicShadows) == 0x00007C, "Member 'FGrassVarietyAdvanced::bOverrideCastsDynamicShadows' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bCastsDynamicShadows) == 0x00007D, "Member 'FGrassVarietyAdvanced::bCastsDynamicShadows' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bOverrideCastsContactShadows) == 0x00007E, "Member 'FGrassVarietyAdvanced::bOverrideCastsContactShadows' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bCastsContactShadows) == 0x00007F, "Member 'FGrassVarietyAdvanced::bCastsContactShadows' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bUseLandscapeLightmap) == 0x000080, "Member 'FGrassVarietyAdvanced::bUseLandscapeLightmap' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, LightingChannels) == 0x000081, "Member 'FGrassVarietyAdvanced::LightingChannels' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bReceivesDecals) == 0x000082, "Member 'FGrassVarietyAdvanced::bReceivesDecals' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bAffectDistanceFieldLighting) == 0x000083, "Member 'FGrassVarietyAdvanced::bAffectDistanceFieldLighting' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bCastDynamicShadow) == 0x000084, "Member 'FGrassVarietyAdvanced::bCastDynamicShadow' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bCastContactShadow) == 0x000085, "Member 'FGrassVarietyAdvanced::bCastContactShadow' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bKeepInstanceBufferCPUCopy) == 0x000086, "Member 'FGrassVarietyAdvanced::bKeepInstanceBufferCPUCopy' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, InstanceWorldPositionOffsetDisableDistance) == 0x000088, "Member 'FGrassVarietyAdvanced::InstanceWorldPositionOffsetDisableDistance' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bHasFoliageCollisionFootprint) == 0x00008C, "Member 'FGrassVarietyAdvanced::bHasFoliageCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, FoliageCollisionFootprint) == 0x000090, "Member 'FGrassVarietyAdvanced::FoliageCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bHasFoliageCollisionCrownFootprint) == 0x000094, "Member 'FGrassVarietyAdvanced::bHasFoliageCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, FoliageCollisionCrownFootprint) == 0x000098, "Member 'FGrassVarietyAdvanced::FoliageCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bOverrideGeometryCollisionFootprint) == 0x00009C, "Member 'FGrassVarietyAdvanced::bOverrideGeometryCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, GeometryCollisionFootprint) == 0x0000A0, "Member 'FGrassVarietyAdvanced::GeometryCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bOverrideGeometryCollisionCrownFootprint) == 0x0000A4, "Member 'FGrassVarietyAdvanced::bOverrideGeometryCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, GeometryCollisionCrownFootprint) == 0x0000A8, "Member 'FGrassVarietyAdvanced::GeometryCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bHasHeightFootprint) == 0x0000AC, "Member 'FGrassVarietyAdvanced::bHasHeightFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, HeightFootprint) == 0x0000B0, "Member 'FGrassVarietyAdvanced::HeightFootprint' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, GeneratorWeight) == 0x0000C0, "Member 'FGrassVarietyAdvanced::GeneratorWeight' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, ZOffsetRandomInterval) == 0x0000C4, "Member 'FGrassVarietyAdvanced::ZOffsetRandomInterval' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bOverrideAffectsDistanceFieldLighting) == 0x0000CC, "Member 'FGrassVarietyAdvanced::bOverrideAffectsDistanceFieldLighting' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bAffectsDistanceFieldLighting) == 0x0000CD, "Member 'FGrassVarietyAdvanced::bAffectsDistanceFieldLighting' has a wrong offset!");
static_assert(offsetof(FGrassVarietyAdvanced, bDoNotSpawnOnMeshes) == 0x0000CE, "Member 'FGrassVarietyAdvanced::bDoNotSpawnOnMeshes' has a wrong offset!");

// ScriptStruct Landscape.GrassVariety
// 0x00E8 (0x00E8 - 0x0000)
struct FGrassVariety final
{
public:
	class UStaticMesh*                            GrassMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGSCFoliagePrefab*                      FoliagePrefab;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistantFoliage;                                   // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGrassVarietyAdvanced                  Advanced;                                          // 0x0018(0x00D0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrassVariety) == 0x000008, "Wrong alignment on FGrassVariety");
static_assert(sizeof(FGrassVariety) == 0x0000E8, "Wrong size on FGrassVariety");
static_assert(offsetof(FGrassVariety, GrassMesh) == 0x000000, "Member 'FGrassVariety::GrassMesh' has a wrong offset!");
static_assert(offsetof(FGrassVariety, FoliagePrefab) == 0x000008, "Member 'FGrassVariety::FoliagePrefab' has a wrong offset!");
static_assert(offsetof(FGrassVariety, bDisabled) == 0x000010, "Member 'FGrassVariety::bDisabled' has a wrong offset!");
static_assert(offsetof(FGrassVariety, bDistantFoliage) == 0x000011, "Member 'FGrassVariety::bDistantFoliage' has a wrong offset!");
static_assert(offsetof(FGrassVariety, Advanced) == 0x000018, "Member 'FGrassVariety::Advanced' has a wrong offset!");

// ScriptStruct Landscape.FoliageSubLayerDensity
// 0x0068 (0x0068 - 0x0000)
struct FFoliageSubLayerDensity final
{
public:
	float                                         Density;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistantDensityScale;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCullDistance;                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCullDistance                          CullDistance;                                      // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCullDistance                          FarCullDistance;                                   // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseLayerMap;                                      // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLayerMap                              LayerMap;                                          // 0x0020(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseVarietyMap;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVarietyMap                            VarietyMap;                                        // 0x0040(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0051(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGrassVariety>                  FoliageVarieties;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageSubLayerDensity) == 0x000008, "Wrong alignment on FFoliageSubLayerDensity");
static_assert(sizeof(FFoliageSubLayerDensity) == 0x000068, "Wrong size on FFoliageSubLayerDensity");
static_assert(offsetof(FFoliageSubLayerDensity, Density) == 0x000000, "Member 'FFoliageSubLayerDensity::Density' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, DistantDensityScale) == 0x000004, "Member 'FFoliageSubLayerDensity::DistantDensityScale' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, bOverrideCullDistance) == 0x000008, "Member 'FFoliageSubLayerDensity::bOverrideCullDistance' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, CullDistance) == 0x00000C, "Member 'FFoliageSubLayerDensity::CullDistance' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, FarCullDistance) == 0x000014, "Member 'FFoliageSubLayerDensity::FarCullDistance' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, bUseLayerMap) == 0x00001C, "Member 'FFoliageSubLayerDensity::bUseLayerMap' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, LayerMap) == 0x000020, "Member 'FFoliageSubLayerDensity::LayerMap' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, bUseVarietyMap) == 0x000038, "Member 'FFoliageSubLayerDensity::bUseVarietyMap' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, VarietyMap) == 0x000040, "Member 'FFoliageSubLayerDensity::VarietyMap' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, bDisabled) == 0x000050, "Member 'FFoliageSubLayerDensity::bDisabled' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, bHidden) == 0x000051, "Member 'FFoliageSubLayerDensity::bHidden' has a wrong offset!");
static_assert(offsetof(FFoliageSubLayerDensity, FoliageVarieties) == 0x000058, "Member 'FFoliageSubLayerDensity::FoliageVarieties' has a wrong offset!");

// ScriptStruct Landscape.FoliageLayerDensity
// 0x0010 (0x0010 - 0x0000)
struct FFoliageLayerDensity final
{
public:
	TArray<struct FFoliageSubLayerDensity>        Layers;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageLayerDensity) == 0x000008, "Wrong alignment on FFoliageLayerDensity");
static_assert(sizeof(FFoliageLayerDensity) == 0x000010, "Wrong size on FFoliageLayerDensity");
static_assert(offsetof(FFoliageLayerDensity, Layers) == 0x000000, "Member 'FFoliageLayerDensity::Layers' has a wrong offset!");

// ScriptStruct Landscape.FoliageTypeDensity
// 0x0028 (0x0028 - 0x0000)
struct FFoliageTypeDensity final
{
public:
	struct FFoliageLayerDensity                   OuterLayerDensity;                                 // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	bool                                          bHasInnerLayer;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFoliageLayerDensity                   InnerLayerDensity;                                 // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageTypeDensity) == 0x000008, "Wrong alignment on FFoliageTypeDensity");
static_assert(sizeof(FFoliageTypeDensity) == 0x000028, "Wrong size on FFoliageTypeDensity");
static_assert(offsetof(FFoliageTypeDensity, OuterLayerDensity) == 0x000000, "Member 'FFoliageTypeDensity::OuterLayerDensity' has a wrong offset!");
static_assert(offsetof(FFoliageTypeDensity, bHasInnerLayer) == 0x000010, "Member 'FFoliageTypeDensity::bHasInnerLayer' has a wrong offset!");
static_assert(offsetof(FFoliageTypeDensity, InnerLayerDensity) == 0x000018, "Member 'FFoliageTypeDensity::InnerLayerDensity' has a wrong offset!");

// ScriptStruct Landscape.Density
// 0x0090 (0x0090 - 0x0000)
struct FDensity final
{
public:
	bool                                          bHasTrees;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFoliageTypeDensity                    TreeDensity;                                       // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
	bool                                          bHasBushes;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFoliageTypeDensity                    BushDensity;                                       // 0x0038(0x0028)(Edit, NativeAccessSpecifierPublic)
	bool                                          bHasGrass;                                         // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFoliageTypeDensity                    GrassDensity;                                      // 0x0068(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDensity) == 0x000008, "Wrong alignment on FDensity");
static_assert(sizeof(FDensity) == 0x000090, "Wrong size on FDensity");
static_assert(offsetof(FDensity, bHasTrees) == 0x000000, "Member 'FDensity::bHasTrees' has a wrong offset!");
static_assert(offsetof(FDensity, TreeDensity) == 0x000008, "Member 'FDensity::TreeDensity' has a wrong offset!");
static_assert(offsetof(FDensity, bHasBushes) == 0x000030, "Member 'FDensity::bHasBushes' has a wrong offset!");
static_assert(offsetof(FDensity, BushDensity) == 0x000038, "Member 'FDensity::BushDensity' has a wrong offset!");
static_assert(offsetof(FDensity, bHasGrass) == 0x000060, "Member 'FDensity::bHasGrass' has a wrong offset!");
static_assert(offsetof(FDensity, GrassDensity) == 0x000068, "Member 'FDensity::GrassDensity' has a wrong offset!");

// ScriptStruct Landscape.GrassLayer
// 0x00B0 (0x00B0 - 0x0000)
struct FGrassLayer final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUInt8Interval                         LayerColor;                                        // 0x0014(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDensity                               Density;                                           // 0x0018(0x0090)(Edit, NativeAccessSpecifierPublic)
	bool                                          bDisabled;                                         // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x00A9(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGrassLayer) == 0x000008, "Wrong alignment on FGrassLayer");
static_assert(sizeof(FGrassLayer) == 0x0000B0, "Wrong size on FGrassLayer");
static_assert(offsetof(FGrassLayer, Name) == 0x000000, "Member 'FGrassLayer::Name' has a wrong offset!");
static_assert(offsetof(FGrassLayer, LayerID) == 0x000010, "Member 'FGrassLayer::LayerID' has a wrong offset!");
static_assert(offsetof(FGrassLayer, LayerColor) == 0x000014, "Member 'FGrassLayer::LayerColor' has a wrong offset!");
static_assert(offsetof(FGrassLayer, Density) == 0x000018, "Member 'FGrassLayer::Density' has a wrong offset!");
static_assert(offsetof(FGrassLayer, bDisabled) == 0x0000A8, "Member 'FGrassLayer::bDisabled' has a wrong offset!");
static_assert(offsetof(FGrassLayer, bHidden) == 0x0000A9, "Member 'FGrassLayer::bHidden' has a wrong offset!");

// ScriptStruct Landscape.BiomInfo
// 0x0018 (0x0018 - 0x0000)
struct FBiomInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Color;                                             // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBiomInfo) == 0x000008, "Wrong alignment on FBiomInfo");
static_assert(sizeof(FBiomInfo) == 0x000018, "Wrong size on FBiomInfo");
static_assert(offsetof(FBiomInfo, Name) == 0x000000, "Member 'FBiomInfo::Name' has a wrong offset!");
static_assert(offsetof(FBiomInfo, Index) == 0x000010, "Member 'FBiomInfo::Index' has a wrong offset!");
static_assert(offsetof(FBiomInfo, Color) == 0x000014, "Member 'FBiomInfo::Color' has a wrong offset!");

// ScriptStruct Landscape.SlopeGroup
// 0x0008 (0x0008 - 0x0000)
struct FSlopeGroup final
{
public:
	struct FFloatInterval                         SlopeRange;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSlopeGroup) == 0x000004, "Wrong alignment on FSlopeGroup");
static_assert(sizeof(FSlopeGroup) == 0x000008, "Wrong size on FSlopeGroup");
static_assert(offsetof(FSlopeGroup, SlopeRange) == 0x000000, "Member 'FSlopeGroup::SlopeRange' has a wrong offset!");

// ScriptStruct Landscape.FoliageMapLayer
// 0x0028 (0x0028 - 0x0000)
struct FFoliageMapLayer final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Interval                         Interval;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasVisualizationColor;                            // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 VisualizationColor;                                // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnTrees;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnBushes;                                      // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnGrass;                                       // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasInnerFoliage;                                  // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInnerFoliage;                                     // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageMapLayer) == 0x000008, "Wrong alignment on FFoliageMapLayer");
static_assert(sizeof(FFoliageMapLayer) == 0x000028, "Wrong size on FFoliageMapLayer");
static_assert(offsetof(FFoliageMapLayer, Name) == 0x000000, "Member 'FFoliageMapLayer::Name' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, Interval) == 0x000010, "Member 'FFoliageMapLayer::Interval' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, bHasVisualizationColor) == 0x000018, "Member 'FFoliageMapLayer::bHasVisualizationColor' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, VisualizationColor) == 0x00001C, "Member 'FFoliageMapLayer::VisualizationColor' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, bSpawnTrees) == 0x000020, "Member 'FFoliageMapLayer::bSpawnTrees' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, bSpawnBushes) == 0x000021, "Member 'FFoliageMapLayer::bSpawnBushes' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, bSpawnGrass) == 0x000022, "Member 'FFoliageMapLayer::bSpawnGrass' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, bHasInnerFoliage) == 0x000023, "Member 'FFoliageMapLayer::bHasInnerFoliage' has a wrong offset!");
static_assert(offsetof(FFoliageMapLayer, bInnerFoliage) == 0x000024, "Member 'FFoliageMapLayer::bInnerFoliage' has a wrong offset!");

// ScriptStruct Landscape.DisableAndHideFlags
// 0x0002 (0x0002 - 0x0000)
struct FDisableAndHideFlags final
{
public:
	bool                                          bDisable;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHide;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisableAndHideFlags) == 0x000001, "Wrong alignment on FDisableAndHideFlags");
static_assert(sizeof(FDisableAndHideFlags) == 0x000002, "Wrong size on FDisableAndHideFlags");
static_assert(offsetof(FDisableAndHideFlags, bDisable) == 0x000000, "Member 'FDisableAndHideFlags::bDisable' has a wrong offset!");
static_assert(offsetof(FDisableAndHideFlags, bHide) == 0x000001, "Member 'FDisableAndHideFlags::bHide' has a wrong offset!");

// ScriptStruct Landscape.DistanceFieldFlags
// 0x0003 (0x0003 - 0x0000)
struct FDistanceFieldFlags final
{
public:
	bool                                          bDefault;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOverride;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDistanceFieldFlags) == 0x000001, "Wrong alignment on FDistanceFieldFlags");
static_assert(sizeof(FDistanceFieldFlags) == 0x000003, "Wrong size on FDistanceFieldFlags");
static_assert(offsetof(FDistanceFieldFlags, bDefault) == 0x000000, "Member 'FDistanceFieldFlags::bDefault' has a wrong offset!");
static_assert(offsetof(FDistanceFieldFlags, bEnableOverride) == 0x000001, "Member 'FDistanceFieldFlags::bEnableOverride' has a wrong offset!");
static_assert(offsetof(FDistanceFieldFlags, bOverride) == 0x000002, "Member 'FDistanceFieldFlags::bOverride' has a wrong offset!");

// ScriptStruct Landscape.GSCFoliagePrefabChild
// 0x0060 (0x0060 - 0x0000)
struct FGSCFoliagePrefabChild final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     ChildOffsets;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	bool                                          bHasFoliageCollisionFootprint;                     // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FoliageCollisionFootprint;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFoliageCollisionCrownFootprint;                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FoliageCollisionCrownFootprint;                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideGeometryCollisionFootprint;               // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeometryCollisionFootprint;                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideGeometryCollisionCrownFootprint;          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeometryCollisionCrownFootprint;                   // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHeightFootprint;                               // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHeightFootprint                       HeightFootprint;                                   // 0x0044(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SurfaceAlignment;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrunkDiameter;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAffectsDistanceFieldLighting;             // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsDistanceFieldLighting;                     // 0x005D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotSpawnOnMeshes;                               // 0x005E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGSCFoliagePrefabChild) == 0x000008, "Wrong alignment on FGSCFoliagePrefabChild");
static_assert(sizeof(FGSCFoliagePrefabChild) == 0x000060, "Wrong size on FGSCFoliagePrefabChild");
static_assert(offsetof(FGSCFoliagePrefabChild, bDisabled) == 0x000000, "Member 'FGSCFoliagePrefabChild::bDisabled' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, StaticMesh) == 0x000008, "Member 'FGSCFoliagePrefabChild::StaticMesh' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, ChildOffsets) == 0x000010, "Member 'FGSCFoliagePrefabChild::ChildOffsets' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bHasFoliageCollisionFootprint) == 0x000020, "Member 'FGSCFoliagePrefabChild::bHasFoliageCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, FoliageCollisionFootprint) == 0x000024, "Member 'FGSCFoliagePrefabChild::FoliageCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bHasFoliageCollisionCrownFootprint) == 0x000028, "Member 'FGSCFoliagePrefabChild::bHasFoliageCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, FoliageCollisionCrownFootprint) == 0x00002C, "Member 'FGSCFoliagePrefabChild::FoliageCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bOverrideGeometryCollisionFootprint) == 0x000030, "Member 'FGSCFoliagePrefabChild::bOverrideGeometryCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, GeometryCollisionFootprint) == 0x000034, "Member 'FGSCFoliagePrefabChild::GeometryCollisionFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bOverrideGeometryCollisionCrownFootprint) == 0x000038, "Member 'FGSCFoliagePrefabChild::bOverrideGeometryCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, GeometryCollisionCrownFootprint) == 0x00003C, "Member 'FGSCFoliagePrefabChild::GeometryCollisionCrownFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bHasHeightFootprint) == 0x000040, "Member 'FGSCFoliagePrefabChild::bHasHeightFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, HeightFootprint) == 0x000044, "Member 'FGSCFoliagePrefabChild::HeightFootprint' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, SurfaceAlignment) == 0x000054, "Member 'FGSCFoliagePrefabChild::SurfaceAlignment' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, TrunkDiameter) == 0x000058, "Member 'FGSCFoliagePrefabChild::TrunkDiameter' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bOverrideAffectsDistanceFieldLighting) == 0x00005C, "Member 'FGSCFoliagePrefabChild::bOverrideAffectsDistanceFieldLighting' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bAffectsDistanceFieldLighting) == 0x00005D, "Member 'FGSCFoliagePrefabChild::bAffectsDistanceFieldLighting' has a wrong offset!");
static_assert(offsetof(FGSCFoliagePrefabChild, bDoNotSpawnOnMeshes) == 0x00005E, "Member 'FGSCFoliagePrefabChild::bDoNotSpawnOnMeshes' has a wrong offset!");

// ScriptStruct Landscape.ObjectPatternChild
// 0x0028 (0x0028 - 0x0000)
struct FObjectPatternChild final
{
public:
	class UStaticMesh*                            ChildMesh;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCullDistance;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndCullDistance;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Footprint;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollision;                                  // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     Transforms;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectPatternChild) == 0x000008, "Wrong alignment on FObjectPatternChild");
static_assert(sizeof(FObjectPatternChild) == 0x000028, "Wrong size on FObjectPatternChild");
static_assert(offsetof(FObjectPatternChild, ChildMesh) == 0x000000, "Member 'FObjectPatternChild::ChildMesh' has a wrong offset!");
static_assert(offsetof(FObjectPatternChild, StartCullDistance) == 0x000008, "Member 'FObjectPatternChild::StartCullDistance' has a wrong offset!");
static_assert(offsetof(FObjectPatternChild, EndCullDistance) == 0x00000C, "Member 'FObjectPatternChild::EndCullDistance' has a wrong offset!");
static_assert(offsetof(FObjectPatternChild, Footprint) == 0x000010, "Member 'FObjectPatternChild::Footprint' has a wrong offset!");
static_assert(offsetof(FObjectPatternChild, bEnableCollision) == 0x000014, "Member 'FObjectPatternChild::bEnableCollision' has a wrong offset!");
static_assert(offsetof(FObjectPatternChild, Transforms) == 0x000018, "Member 'FObjectPatternChild::Transforms' has a wrong offset!");

// ScriptStruct Landscape.LandscapeLayerBrush
// 0x0001 (0x0001 - 0x0000)
struct FLandscapeLayerBrush final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandscapeLayerBrush) == 0x000001, "Wrong alignment on FLandscapeLayerBrush");
static_assert(sizeof(FLandscapeLayerBrush) == 0x000001, "Wrong size on FLandscapeLayerBrush");

// ScriptStruct Landscape.LandscapeLayer
// 0x0088 (0x0088 - 0x0000)
struct FLandscapeLayer final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisible;                                          // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightmapAlpha;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightmapAlpha;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandscapeBlendMode                           BlendMode;                                         // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLandscapeLayerBrush>           Brushes;                                           // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class ULandscapeLayerInfoObject*, bool>  WeightmapLayerAllocationBlend;                     // 0x0038(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeLayer) == 0x000008, "Wrong alignment on FLandscapeLayer");
static_assert(sizeof(FLandscapeLayer) == 0x000088, "Wrong size on FLandscapeLayer");
static_assert(offsetof(FLandscapeLayer, Guid) == 0x000000, "Member 'FLandscapeLayer::Guid' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, Name) == 0x000010, "Member 'FLandscapeLayer::Name' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, bVisible) == 0x000018, "Member 'FLandscapeLayer::bVisible' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, bLocked) == 0x000019, "Member 'FLandscapeLayer::bLocked' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, HeightmapAlpha) == 0x00001C, "Member 'FLandscapeLayer::HeightmapAlpha' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, WeightmapAlpha) == 0x000020, "Member 'FLandscapeLayer::WeightmapAlpha' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, BlendMode) == 0x000024, "Member 'FLandscapeLayer::BlendMode' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, Brushes) == 0x000028, "Member 'FLandscapeLayer::Brushes' has a wrong offset!");
static_assert(offsetof(FLandscapeLayer, WeightmapLayerAllocationBlend) == 0x000038, "Member 'FLandscapeLayer::WeightmapLayerAllocationBlend' has a wrong offset!");

// ScriptStruct Landscape.LandscapeEditToolRenderData
// 0x0038 (0x0038 - 0x0000)
struct FLandscapeEditToolRenderData final
{
public:
	class UMaterialInterface*                     ToolMaterial;                                      // 0x0000(0x0008)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     GizmoMaterial;                                     // 0x0008(0x0008)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedType;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugChannelR;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugChannelG;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DebugChannelB;                                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DataTexture;                                       // 0x0020(0x0008)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             LayerContributionTexture;                          // 0x0028(0x0008)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DirtyTexture;                                      // 0x0030(0x0008)(ZeroConstructor, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeEditToolRenderData) == 0x000008, "Wrong alignment on FLandscapeEditToolRenderData");
static_assert(sizeof(FLandscapeEditToolRenderData) == 0x000038, "Wrong size on FLandscapeEditToolRenderData");
static_assert(offsetof(FLandscapeEditToolRenderData, ToolMaterial) == 0x000000, "Member 'FLandscapeEditToolRenderData::ToolMaterial' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, GizmoMaterial) == 0x000008, "Member 'FLandscapeEditToolRenderData::GizmoMaterial' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, SelectedType) == 0x000010, "Member 'FLandscapeEditToolRenderData::SelectedType' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, DebugChannelR) == 0x000014, "Member 'FLandscapeEditToolRenderData::DebugChannelR' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, DebugChannelG) == 0x000018, "Member 'FLandscapeEditToolRenderData::DebugChannelG' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, DebugChannelB) == 0x00001C, "Member 'FLandscapeEditToolRenderData::DebugChannelB' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, DataTexture) == 0x000020, "Member 'FLandscapeEditToolRenderData::DataTexture' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, LayerContributionTexture) == 0x000028, "Member 'FLandscapeEditToolRenderData::LayerContributionTexture' has a wrong offset!");
static_assert(offsetof(FLandscapeEditToolRenderData, DirtyTexture) == 0x000030, "Member 'FLandscapeEditToolRenderData::DirtyTexture' has a wrong offset!");

// ScriptStruct Landscape.WeightmapLayerAllocationInfo
// 0x0010 (0x0010 - 0x0000)
struct FWeightmapLayerAllocationInfo final
{
public:
	class ULandscapeLayerInfoObject*              LayerInfo;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WeightmapTextureIndex;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WeightmapTextureChannel;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeightmapLayerAllocationInfo) == 0x000008, "Wrong alignment on FWeightmapLayerAllocationInfo");
static_assert(sizeof(FWeightmapLayerAllocationInfo) == 0x000010, "Wrong size on FWeightmapLayerAllocationInfo");
static_assert(offsetof(FWeightmapLayerAllocationInfo, LayerInfo) == 0x000000, "Member 'FWeightmapLayerAllocationInfo::LayerInfo' has a wrong offset!");
static_assert(offsetof(FWeightmapLayerAllocationInfo, WeightmapTextureIndex) == 0x000008, "Member 'FWeightmapLayerAllocationInfo::WeightmapTextureIndex' has a wrong offset!");
static_assert(offsetof(FWeightmapLayerAllocationInfo, WeightmapTextureChannel) == 0x000009, "Member 'FWeightmapLayerAllocationInfo::WeightmapTextureChannel' has a wrong offset!");

// ScriptStruct Landscape.LandscapeComponentMaterialOverride
// 0x0010 (0x0010 - 0x0000)
struct FLandscapeComponentMaterialOverride final
{
public:
	struct FPerPlatformInt                        LODIndex;                                          // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeComponentMaterialOverride) == 0x000008, "Wrong alignment on FLandscapeComponentMaterialOverride");
static_assert(sizeof(FLandscapeComponentMaterialOverride) == 0x000010, "Wrong size on FLandscapeComponentMaterialOverride");
static_assert(offsetof(FLandscapeComponentMaterialOverride, LODIndex) == 0x000000, "Member 'FLandscapeComponentMaterialOverride::LODIndex' has a wrong offset!");
static_assert(offsetof(FLandscapeComponentMaterialOverride, Material) == 0x000008, "Member 'FLandscapeComponentMaterialOverride::Material' has a wrong offset!");

// ScriptStruct Landscape.LandscapePerLODMaterialOverride
// 0x0010 (0x0010 - 0x0000)
struct FLandscapePerLODMaterialOverride final
{
public:
	int32                                         LODIndex;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapePerLODMaterialOverride) == 0x000008, "Wrong alignment on FLandscapePerLODMaterialOverride");
static_assert(sizeof(FLandscapePerLODMaterialOverride) == 0x000010, "Wrong size on FLandscapePerLODMaterialOverride");
static_assert(offsetof(FLandscapePerLODMaterialOverride, LODIndex) == 0x000000, "Member 'FLandscapePerLODMaterialOverride::LODIndex' has a wrong offset!");
static_assert(offsetof(FLandscapePerLODMaterialOverride, Material) == 0x000008, "Member 'FLandscapePerLODMaterialOverride::Material' has a wrong offset!");

// ScriptStruct Landscape.WeightmapData
// 0x0030 (0x0030 - 0x0000)
struct FWeightmapData final
{
public:
	TArray<class UTexture2D*>                     Textures;                                          // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FWeightmapLayerAllocationInfo>  LayerAllocations;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ULandscapeWeightmapUsage*>       TextureUsages;                                     // 0x0020(0x0010)(ZeroConstructor, Transient, NonTransactional, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeightmapData) == 0x000008, "Wrong alignment on FWeightmapData");
static_assert(sizeof(FWeightmapData) == 0x000030, "Wrong size on FWeightmapData");
static_assert(offsetof(FWeightmapData, Textures) == 0x000000, "Member 'FWeightmapData::Textures' has a wrong offset!");
static_assert(offsetof(FWeightmapData, LayerAllocations) == 0x000010, "Member 'FWeightmapData::LayerAllocations' has a wrong offset!");
static_assert(offsetof(FWeightmapData, TextureUsages) == 0x000020, "Member 'FWeightmapData::TextureUsages' has a wrong offset!");

// ScriptStruct Landscape.HeightmapData
// 0x0008 (0x0008 - 0x0000)
struct FHeightmapData final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeightmapData) == 0x000008, "Wrong alignment on FHeightmapData");
static_assert(sizeof(FHeightmapData) == 0x000008, "Wrong size on FHeightmapData");
static_assert(offsetof(FHeightmapData, Texture) == 0x000000, "Member 'FHeightmapData::Texture' has a wrong offset!");

// ScriptStruct Landscape.LandscapeLayerComponentData
// 0x0038 (0x0038 - 0x0000)
struct FLandscapeLayerComponentData final
{
public:
	struct FHeightmapData                         HeightmapData;                                     // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FWeightmapData                         WeightmapData;                                     // 0x0008(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeLayerComponentData) == 0x000008, "Wrong alignment on FLandscapeLayerComponentData");
static_assert(sizeof(FLandscapeLayerComponentData) == 0x000038, "Wrong size on FLandscapeLayerComponentData");
static_assert(offsetof(FLandscapeLayerComponentData, HeightmapData) == 0x000000, "Member 'FLandscapeLayerComponentData::HeightmapData' has a wrong offset!");
static_assert(offsetof(FLandscapeLayerComponentData, WeightmapData) == 0x000008, "Member 'FLandscapeLayerComponentData::WeightmapData' has a wrong offset!");

// ScriptStruct Landscape.PhysicalMaterialInput
// 0x0030 (0x0030 - 0x0000)
struct FPhysicalMaterialInput final
{
public:
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Input;                                             // 0x0008(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPhysicalMaterialInput) == 0x000008, "Wrong alignment on FPhysicalMaterialInput");
static_assert(sizeof(FPhysicalMaterialInput) == 0x000030, "Wrong size on FPhysicalMaterialInput");
static_assert(offsetof(FPhysicalMaterialInput, PhysicalMaterial) == 0x000000, "Member 'FPhysicalMaterialInput::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(FPhysicalMaterialInput, Input) == 0x000008, "Member 'FPhysicalMaterialInput::Input' has a wrong offset!");

// ScriptStruct Landscape.GizmoSelectData
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FGizmoSelectData final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGizmoSelectData) == 0x000008, "Wrong alignment on FGizmoSelectData");
static_assert(sizeof(FGizmoSelectData) == 0x000050, "Wrong size on FGizmoSelectData");

// ScriptStruct Landscape.LandscapeMaterialTextureStreamingInfo
// 0x000C (0x000C - 0x0000)
struct FLandscapeMaterialTextureStreamingInfo final
{
public:
	class FName                                   TextureName;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexelFactor;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeMaterialTextureStreamingInfo) == 0x000004, "Wrong alignment on FLandscapeMaterialTextureStreamingInfo");
static_assert(sizeof(FLandscapeMaterialTextureStreamingInfo) == 0x00000C, "Wrong size on FLandscapeMaterialTextureStreamingInfo");
static_assert(offsetof(FLandscapeMaterialTextureStreamingInfo, TextureName) == 0x000000, "Member 'FLandscapeMaterialTextureStreamingInfo::TextureName' has a wrong offset!");
static_assert(offsetof(FLandscapeMaterialTextureStreamingInfo, TexelFactor) == 0x000008, "Member 'FLandscapeMaterialTextureStreamingInfo::TexelFactor' has a wrong offset!");

// ScriptStruct Landscape.LandscapeSplineConnection
// 0x0010 (0x0010 - 0x0000)
struct FLandscapeSplineConnection final
{
public:
	class ULandscapeSplineSegment*                Segment;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         End : 1;                                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandscapeSplineConnection) == 0x000008, "Wrong alignment on FLandscapeSplineConnection");
static_assert(sizeof(FLandscapeSplineConnection) == 0x000010, "Wrong size on FLandscapeSplineConnection");
static_assert(offsetof(FLandscapeSplineConnection, Segment) == 0x000000, "Member 'FLandscapeSplineConnection::Segment' has a wrong offset!");

// ScriptStruct Landscape.ForeignControlPointData
// 0x0001 (0x0001 - 0x0000)
struct FForeignControlPointData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FForeignControlPointData) == 0x000001, "Wrong alignment on FForeignControlPointData");
static_assert(sizeof(FForeignControlPointData) == 0x000001, "Wrong size on FForeignControlPointData");

// ScriptStruct Landscape.ForeignSplineSegmentData
// 0x0001 (0x0001 - 0x0000)
struct FForeignSplineSegmentData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FForeignSplineSegmentData) == 0x000001, "Wrong alignment on FForeignSplineSegmentData");
static_assert(sizeof(FForeignSplineSegmentData) == 0x000001, "Wrong size on FForeignSplineSegmentData");

// ScriptStruct Landscape.ForeignWorldSplineData
// 0x0001 (0x0001 - 0x0000)
struct FForeignWorldSplineData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FForeignWorldSplineData) == 0x000001, "Wrong alignment on FForeignWorldSplineData");
static_assert(sizeof(FForeignWorldSplineData) == 0x000001, "Wrong size on FForeignWorldSplineData");

// ScriptStruct Landscape.LandscapeSplineInterpPoint
// 0x00E0 (0x00E0 - 0x0000)
struct FLandscapeSplineInterpPoint final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Left;                                              // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Right;                                             // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FalloffLeft;                                       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FalloffRight;                                      // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerLeft;                                         // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerRight;                                        // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerFalloffLeft;                                  // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerFalloffRight;                                 // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartEndFalloff;                                   // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandscapeSplineInterpPoint) == 0x000008, "Wrong alignment on FLandscapeSplineInterpPoint");
static_assert(sizeof(FLandscapeSplineInterpPoint) == 0x0000E0, "Wrong size on FLandscapeSplineInterpPoint");
static_assert(offsetof(FLandscapeSplineInterpPoint, Center) == 0x000000, "Member 'FLandscapeSplineInterpPoint::Center' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, Left) == 0x000018, "Member 'FLandscapeSplineInterpPoint::Left' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, Right) == 0x000030, "Member 'FLandscapeSplineInterpPoint::Right' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, FalloffLeft) == 0x000048, "Member 'FLandscapeSplineInterpPoint::FalloffLeft' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, FalloffRight) == 0x000060, "Member 'FLandscapeSplineInterpPoint::FalloffRight' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, LayerLeft) == 0x000078, "Member 'FLandscapeSplineInterpPoint::LayerLeft' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, LayerRight) == 0x000090, "Member 'FLandscapeSplineInterpPoint::LayerRight' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, LayerFalloffLeft) == 0x0000A8, "Member 'FLandscapeSplineInterpPoint::LayerFalloffLeft' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, LayerFalloffRight) == 0x0000C0, "Member 'FLandscapeSplineInterpPoint::LayerFalloffRight' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineInterpPoint, StartEndFalloff) == 0x0000D8, "Member 'FLandscapeSplineInterpPoint::StartEndFalloff' has a wrong offset!");

// ScriptStruct Landscape.LandscapeSplineSegmentConnection
// 0x0018 (0x0018 - 0x0000)
struct FLandscapeSplineSegmentConnection final
{
public:
	class ULandscapeSplineControlPoint*           ControlPoint;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TangentLen;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandscapeSplineSegmentConnection) == 0x000008, "Wrong alignment on FLandscapeSplineSegmentConnection");
static_assert(sizeof(FLandscapeSplineSegmentConnection) == 0x000018, "Wrong size on FLandscapeSplineSegmentConnection");
static_assert(offsetof(FLandscapeSplineSegmentConnection, ControlPoint) == 0x000000, "Member 'FLandscapeSplineSegmentConnection::ControlPoint' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineSegmentConnection, TangentLen) == 0x000008, "Member 'FLandscapeSplineSegmentConnection::TangentLen' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineSegmentConnection, SocketName) == 0x00000C, "Member 'FLandscapeSplineSegmentConnection::SocketName' has a wrong offset!");

// ScriptStruct Landscape.LandscapeSplineMeshEntry
// 0x0058 (0x0058 - 0x0000)
struct FLandscapeSplineMeshEntry final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             MaterialOverrides;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         bCenterH : 1;                                      // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CenterAdjust;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bScaleToWidth : 1;                                 // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandscapeSplineMeshOrientation               Orientation;                                       // 0x0050(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineMeshAxis                               ForwardAxis;                                       // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineMeshAxis                               UpAxis;                                            // 0x0052(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandscapeSplineMeshEntry) == 0x000008, "Wrong alignment on FLandscapeSplineMeshEntry");
static_assert(sizeof(FLandscapeSplineMeshEntry) == 0x000058, "Wrong size on FLandscapeSplineMeshEntry");
static_assert(offsetof(FLandscapeSplineMeshEntry, Mesh) == 0x000000, "Member 'FLandscapeSplineMeshEntry::Mesh' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineMeshEntry, MaterialOverrides) == 0x000008, "Member 'FLandscapeSplineMeshEntry::MaterialOverrides' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineMeshEntry, CenterAdjust) == 0x000020, "Member 'FLandscapeSplineMeshEntry::CenterAdjust' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineMeshEntry, Scale) == 0x000038, "Member 'FLandscapeSplineMeshEntry::Scale' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineMeshEntry, Orientation) == 0x000050, "Member 'FLandscapeSplineMeshEntry::Orientation' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineMeshEntry, ForwardAxis) == 0x000051, "Member 'FLandscapeSplineMeshEntry::ForwardAxis' has a wrong offset!");
static_assert(offsetof(FLandscapeSplineMeshEntry, UpAxis) == 0x000052, "Member 'FLandscapeSplineMeshEntry::UpAxis' has a wrong offset!");

// ScriptStruct Landscape.GrassInput
// 0x0038 (0x0038 - 0x0000)
struct FGrassInput final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULandscapeGrassType*                    GrassType;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Input;                                             // 0x0010(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGrassInput) == 0x000008, "Wrong alignment on FGrassInput");
static_assert(sizeof(FGrassInput) == 0x000038, "Wrong size on FGrassInput");
static_assert(offsetof(FGrassInput, Name) == 0x000000, "Member 'FGrassInput::Name' has a wrong offset!");
static_assert(offsetof(FGrassInput, GrassType) == 0x000008, "Member 'FGrassInput::GrassType' has a wrong offset!");
static_assert(offsetof(FGrassInput, Input) == 0x000010, "Member 'FGrassInput::Input' has a wrong offset!");

// ScriptStruct Landscape.LayerBlendInput
// 0x0088 (0x0088 - 0x0000)
struct FLayerBlendInput final
{
public:
	class FName                                   LayerName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELandscapeLayerBlendType                      BlendType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FExpressionInput                       LayerInput;                                        // 0x0010(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       HeightInput;                                       // 0x0038(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	float                                         PreviewWeight;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConstLayerInput;                                   // 0x0068(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstHeightInput;                                  // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayerBlendInput) == 0x000008, "Wrong alignment on FLayerBlendInput");
static_assert(sizeof(FLayerBlendInput) == 0x000088, "Wrong size on FLayerBlendInput");
static_assert(offsetof(FLayerBlendInput, LayerName) == 0x000000, "Member 'FLayerBlendInput::LayerName' has a wrong offset!");
static_assert(offsetof(FLayerBlendInput, BlendType) == 0x000008, "Member 'FLayerBlendInput::BlendType' has a wrong offset!");
static_assert(offsetof(FLayerBlendInput, LayerInput) == 0x000010, "Member 'FLayerBlendInput::LayerInput' has a wrong offset!");
static_assert(offsetof(FLayerBlendInput, HeightInput) == 0x000038, "Member 'FLayerBlendInput::HeightInput' has a wrong offset!");
static_assert(offsetof(FLayerBlendInput, PreviewWeight) == 0x000060, "Member 'FLayerBlendInput::PreviewWeight' has a wrong offset!");
static_assert(offsetof(FLayerBlendInput, ConstLayerInput) == 0x000068, "Member 'FLayerBlendInput::ConstLayerInput' has a wrong offset!");
static_assert(offsetof(FLayerBlendInput, ConstHeightInput) == 0x000080, "Member 'FLayerBlendInput::ConstHeightInput' has a wrong offset!");

// ScriptStruct Landscape.LandscapeInfoLayerSettings
// 0x0010 (0x0010 - 0x0000)
struct FLandscapeInfoLayerSettings final
{
public:
	class ULandscapeLayerInfoObject*              LayerInfoObj;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LayerName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeInfoLayerSettings) == 0x000008, "Wrong alignment on FLandscapeInfoLayerSettings");
static_assert(sizeof(FLandscapeInfoLayerSettings) == 0x000010, "Wrong size on FLandscapeInfoLayerSettings");
static_assert(offsetof(FLandscapeInfoLayerSettings, LayerInfoObj) == 0x000000, "Member 'FLandscapeInfoLayerSettings::LayerInfoObj' has a wrong offset!");
static_assert(offsetof(FLandscapeInfoLayerSettings, LayerName) == 0x000008, "Member 'FLandscapeInfoLayerSettings::LayerName' has a wrong offset!");

// ScriptStruct Landscape.LandscapeEditorLayerSettings
// 0x0001 (0x0001 - 0x0000)
struct FLandscapeEditorLayerSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandscapeEditorLayerSettings) == 0x000001, "Wrong alignment on FLandscapeEditorLayerSettings");
static_assert(sizeof(FLandscapeEditorLayerSettings) == 0x000001, "Wrong size on FLandscapeEditorLayerSettings");

// ScriptStruct Landscape.AsyncSpawnMeshRequest
// 0x0001 (0x0001 - 0x0000)
struct FAsyncSpawnMeshRequest final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAsyncSpawnMeshRequest) == 0x000001, "Wrong alignment on FAsyncSpawnMeshRequest");
static_assert(sizeof(FAsyncSpawnMeshRequest) == 0x000001, "Wrong size on FAsyncSpawnMeshRequest");

// ScriptStruct Landscape.LandscapeLayerStruct
// 0x0008 (0x0008 - 0x0000)
struct FLandscapeLayerStruct final
{
public:
	class ULandscapeLayerInfoObject*              LayerInfoObj;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLandscapeLayerStruct) == 0x000008, "Wrong alignment on FLandscapeLayerStruct");
static_assert(sizeof(FLandscapeLayerStruct) == 0x000008, "Wrong size on FLandscapeLayerStruct");
static_assert(offsetof(FLandscapeLayerStruct, LayerInfoObj) == 0x000000, "Member 'FLandscapeLayerStruct::LayerInfoObj' has a wrong offset!");

// ScriptStruct Landscape.LandscapeImportLayerInfo
// 0x0001 (0x0001 - 0x0000)
struct FLandscapeImportLayerInfo final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLandscapeImportLayerInfo) == 0x000001, "Wrong alignment on FLandscapeImportLayerInfo");
static_assert(sizeof(FLandscapeImportLayerInfo) == 0x000001, "Wrong size on FLandscapeImportLayerInfo");

}

