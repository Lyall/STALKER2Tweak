#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkinnedDecalComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SkinnedDecalComponent_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class SkinnedDecalComponent.SkinnedDecalInstance
// 0x0010 (0x02B0 - 0x02A0)
class USkinnedDecalInstance final : public USceneComponent
{
public:
	int32                                         Index_0;                                           // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubUV;                                             // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         size;                                              // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USkinnedDecalSampler* GetSampler();
	void UpdateDecal();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkinnedDecalInstance">();
	}
	static class USkinnedDecalInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkinnedDecalInstance>();
	}
};
static_assert(alignof(USkinnedDecalInstance) == 0x000010, "Wrong alignment on USkinnedDecalInstance");
static_assert(sizeof(USkinnedDecalInstance) == 0x0002B0, "Wrong size on USkinnedDecalInstance");
static_assert(offsetof(USkinnedDecalInstance, Index_0) == 0x0002A0, "Member 'USkinnedDecalInstance::Index_0' has a wrong offset!");
static_assert(offsetof(USkinnedDecalInstance, SubUV) == 0x0002A4, "Member 'USkinnedDecalInstance::SubUV' has a wrong offset!");
static_assert(offsetof(USkinnedDecalInstance, size) == 0x0002A8, "Member 'USkinnedDecalInstance::size' has a wrong offset!");

// Class SkinnedDecalComponent.SkinnedDecalSampler
// 0x00C8 (0x0168 - 0x00A0)
class USkinnedDecalSampler final : public UActorComponent
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x00A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        DecalLocations;                                    // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 EmptyIndexes;                                      // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialParameterAssociation                 Association;                                       // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkinnedDecalAdditionalData                   AdditionalData;                                    // 0x00CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       Materials;                                         // 0x00D0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LastDecalIndex;                                    // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDecals;                                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDecalDistance;                                  // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TranslucentBlend;                                  // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     TranslucentBlendMaterial;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class USkinnedDecalInstance*, int32>     InstanceMap;                                       // 0x00F8(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               TranslucentBlendMaterialDynamic;                   // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>         RenderMeshes;                                      // 0x0150(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 DataTarget;                                        // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClearAllDecals();
	void CloneDecals(class USkinnedDecalSampler* Source);
	class UTextureRenderTarget2D* GetDataTarget();
	void RemoveDecal(const int32 Index_0);
	void SetMeshComponent(class USkeletalMeshComponent* MeshComponent, bool Child);
	void SetupMaterials();
	int32 SpawnDecal(const struct FVector& Location, const struct FQuat& Rotation, class FName BoneName, float size, int32 SubUV, int32 Index_0);
	void UpdateAllDecals();
	void UpdateInstance(class USkinnedDecalInstance* Instance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkinnedDecalSampler">();
	}
	static class USkinnedDecalSampler* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkinnedDecalSampler>();
	}
};
static_assert(alignof(USkinnedDecalSampler) == 0x000008, "Wrong alignment on USkinnedDecalSampler");
static_assert(sizeof(USkinnedDecalSampler) == 0x000168, "Wrong size on USkinnedDecalSampler");
static_assert(offsetof(USkinnedDecalSampler, Mesh) == 0x0000A0, "Member 'USkinnedDecalSampler::Mesh' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, DecalLocations) == 0x0000A8, "Member 'USkinnedDecalSampler::DecalLocations' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, EmptyIndexes) == 0x0000B8, "Member 'USkinnedDecalSampler::EmptyIndexes' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, LayerIndex) == 0x0000C8, "Member 'USkinnedDecalSampler::LayerIndex' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, Association) == 0x0000CC, "Member 'USkinnedDecalSampler::Association' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, AdditionalData) == 0x0000CD, "Member 'USkinnedDecalSampler::AdditionalData' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, Materials) == 0x0000D0, "Member 'USkinnedDecalSampler::Materials' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, LastDecalIndex) == 0x0000E0, "Member 'USkinnedDecalSampler::LastDecalIndex' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, MaxDecals) == 0x0000E4, "Member 'USkinnedDecalSampler::MaxDecals' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, MinDecalDistance) == 0x0000E8, "Member 'USkinnedDecalSampler::MinDecalDistance' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, TranslucentBlend) == 0x0000EC, "Member 'USkinnedDecalSampler::TranslucentBlend' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, TranslucentBlendMaterial) == 0x0000F0, "Member 'USkinnedDecalSampler::TranslucentBlendMaterial' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, InstanceMap) == 0x0000F8, "Member 'USkinnedDecalSampler::InstanceMap' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, TranslucentBlendMaterialDynamic) == 0x000148, "Member 'USkinnedDecalSampler::TranslucentBlendMaterialDynamic' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, RenderMeshes) == 0x000150, "Member 'USkinnedDecalSampler::RenderMeshes' has a wrong offset!");
static_assert(offsetof(USkinnedDecalSampler, DataTarget) == 0x000160, "Member 'USkinnedDecalSampler::DataTarget' has a wrong offset!");

}

