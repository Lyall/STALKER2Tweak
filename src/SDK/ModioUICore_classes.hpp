#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ModioUICore

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "Modio_structs.hpp"
#include "Engine_classes.hpp"
#include "ModioUICore_structs.hpp"


namespace SDK
{

// Class ModioUICore.ModioExtendedModInfoUIDetails
// 0x0000 (0x0028 - 0x0028)
class IModioExtendedModInfoUIDetails final : public IInterface
{
public:
	bool IsModEnabled();

	bool HasModErrors() const;
	bool IsModDownloading() const;
	bool IsModExtracting() const;
	bool IsModInQueue() const;
	bool IsModInstalled() const;
	bool IsModSubscribed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioExtendedModInfoUIDetails">();
	}
	static class IModioExtendedModInfoUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioExtendedModInfoUIDetails>();
	}
};
static_assert(alignof(IModioExtendedModInfoUIDetails) == 0x000008, "Wrong alignment on IModioExtendedModInfoUIDetails");
static_assert(sizeof(IModioExtendedModInfoUIDetails) == 0x000028, "Wrong size on IModioExtendedModInfoUIDetails");

// Class ModioUICore.ModioModBrowserInterface
// 0x0000 (0x0028 - 0x0028)
class IModioModBrowserInterface final : public IInterface
{
public:
	bool GetIsCollectionModDisableUIEnabled();
	bool IsDownloadDrawerOpen();
	void LogOut();
	void RequestExternalAuthentication(EModioAuthenticationProvider Provider);
	void ShowDetailsForMod(const struct FModioModID& ID);
	void ShowDialog(class UObject* DialogDataSource);
	void ShowModUnsubscribeDialog(class UObject* DialogDataSource);
	void ShowReportMod(class UObject* DialogDataSource);
	void ShowSearchResults(const struct FModioModCategoryParams& FilterParams);
	void ShowUserAuth();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModBrowserInterface">();
	}
	static class IModioModBrowserInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModBrowserInterface>();
	}
};
static_assert(alignof(IModioModBrowserInterface) == 0x000008, "Wrong alignment on IModioModBrowserInterface");
static_assert(sizeof(IModioModBrowserInterface) == 0x000028, "Wrong size on IModioModBrowserInterface");

// Class ModioUICore.ModioModInfoUIDetails
// 0x0000 (0x0028 - 0x0028)
class IModioModInfoUIDetails final : public IInterface
{
public:
	struct FModioModInfo GetFullModInfo();
	struct FModioModID GetModID();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModInfoUIDetails">();
	}
	static class IModioModInfoUIDetails* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioModInfoUIDetails>();
	}
};
static_assert(alignof(IModioModInfoUIDetails) == 0x000008, "Wrong alignment on IModioModInfoUIDetails");
static_assert(sizeof(IModioModInfoUIDetails) == 0x000028, "Wrong size on IModioModInfoUIDetails");

// Class ModioUICore.ModioUIAsyncHandlerWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIAsyncHandlerWidget final : public IInterface
{
public:
	void LinkAsyncOperationWidget(const TScriptInterface<class IModioUIAsyncOperationWidget>& Widget);

	EModioUIAsyncOperationWidgetState GetAsyncOperationState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncHandlerWidget">();
	}
	static class IModioUIAsyncHandlerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAsyncHandlerWidget>();
	}
};
static_assert(alignof(IModioUIAsyncHandlerWidget) == 0x000008, "Wrong alignment on IModioUIAsyncHandlerWidget");
static_assert(sizeof(IModioUIAsyncHandlerWidget) == 0x000028, "Wrong size on IModioUIAsyncHandlerWidget");

// Class ModioUICore.ModioUIAsyncOperationWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIAsyncOperationWidget final : public IInterface
{
public:
	void NotifyOperationState(EModioUIAsyncOperationWidgetState NewState);
	void RequestOperationRetry();
	void SetOperationStateDelegate(const TDelegate<void(EModioUIAsyncOperationWidgetState NewState)>& Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncOperationWidget">();
	}
	static class IModioUIAsyncOperationWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAsyncOperationWidget>();
	}
};
static_assert(alignof(IModioUIAsyncOperationWidget) == 0x000008, "Wrong alignment on IModioUIAsyncOperationWidget");
static_assert(sizeof(IModioUIAsyncOperationWidget) == 0x000028, "Wrong size on IModioUIAsyncOperationWidget");

// Class ModioUICore.ModioUIAsyncRetryWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIAsyncRetryWidget final : public IInterface
{
public:
	void SetRetryRequestedDelegate(const TDelegate<void()>& Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncRetryWidget">();
	}
	static class IModioUIAsyncRetryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAsyncRetryWidget>();
	}
};
static_assert(alignof(IModioUIAsyncRetryWidget) == 0x000008, "Wrong alignment on IModioUIAsyncRetryWidget");
static_assert(sizeof(IModioUIAsyncRetryWidget) == 0x000028, "Wrong size on IModioUIAsyncRetryWidget");

// Class ModioUICore.ModioUIAuthenticationChangedReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUIAuthenticationChangedReceiver final : public IInterface
{
public:
	void OnAuthenticationChanged(const struct FModioOptionalUser& User);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAuthenticationChangedReceiver">();
	}
	static class IModioUIAuthenticationChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIAuthenticationChangedReceiver>();
	}
};
static_assert(alignof(IModioUIAuthenticationChangedReceiver) == 0x000008, "Wrong alignment on IModioUIAuthenticationChangedReceiver");
static_assert(sizeof(IModioUIAuthenticationChangedReceiver) == 0x000028, "Wrong size on IModioUIAuthenticationChangedReceiver");

// Class ModioUICore.ModioUIMediaDownloadCompletedReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUIMediaDownloadCompletedReceiver final : public IInterface
{
public:
	void OnModCreatorAvatarDownloadCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& Ec, const struct FModioOptionalImage& Image);
	void OnModGalleryImageDownloadCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& Ec, int32 ImageIndex, const struct FModioOptionalImage& Image);
	void OnModLogoDownloadCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& Ec, const struct FModioOptionalImage& Image, EModioLogoSize LogoSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIMediaDownloadCompletedReceiver">();
	}
	static class IModioUIMediaDownloadCompletedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIMediaDownloadCompletedReceiver>();
	}
};
static_assert(alignof(IModioUIMediaDownloadCompletedReceiver) == 0x000008, "Wrong alignment on IModioUIMediaDownloadCompletedReceiver");
static_assert(sizeof(IModioUIMediaDownloadCompletedReceiver) == 0x000028, "Wrong size on IModioUIMediaDownloadCompletedReceiver");

// Class ModioUICore.ModioUIModEnableWidget
// 0x0000 (0x0028 - 0x0028)
class IModioUIModEnableWidget final : public IInterface
{
public:
	void ModEnabledStateChangedHandler(const struct FModioModID& ModId, bool bNewSubscriptionState);
	void OnModEnabledStateChanged(const struct FModioModID& ModId, bool bNewSubscriptionState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModEnableWidget">();
	}
	static class IModioUIModEnableWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModEnableWidget>();
	}
};
static_assert(alignof(IModioUIModEnableWidget) == 0x000008, "Wrong alignment on IModioUIModEnableWidget");
static_assert(sizeof(IModioUIModEnableWidget) == 0x000028, "Wrong size on IModioUIModEnableWidget");

// Class ModioUICore.ModioUIModInfoReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUIModInfoReceiver final : public IInterface
{
public:
	void OnListAllModsRequestCompleted(const class FString& RequestIdentifier, const struct FModioErrorCode& Ec, const struct FModioOptionalModInfoList& List);
	void OnModInfoRequestCompleted(const struct FModioModID& ModId, const struct FModioErrorCode& Ec, const struct FModioOptionalModInfo& Info);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModInfoReceiver">();
	}
	static class IModioUIModInfoReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModInfoReceiver>();
	}
};
static_assert(alignof(IModioUIModInfoReceiver) == 0x000008, "Wrong alignment on IModioUIModInfoReceiver");
static_assert(sizeof(IModioUIModInfoReceiver) == 0x000028, "Wrong size on IModioUIModInfoReceiver");

// Class ModioUICore.ModioUIModManagementEventReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUIModManagementEventReceiver final : public IInterface
{
public:
	void OnModManagementEvent(const struct FModioModManagementEvent& Event);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIModManagementEventReceiver">();
	}
	static class IModioUIModManagementEventReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIModManagementEventReceiver>();
	}
};
static_assert(alignof(IModioUIModManagementEventReceiver) == 0x000008, "Wrong alignment on IModioUIModManagementEventReceiver");
static_assert(sizeof(IModioUIModManagementEventReceiver) == 0x000028, "Wrong size on IModioUIModManagementEventReceiver");

// Class ModioUICore.ModioNotificationParamsLibrary
// 0x0000 (0x0028 - 0x0028)
class UModioNotificationParamsLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FModioNotificationParams AddFormatText(struct FModioNotificationParams& NotificationParams, const class FName& Name_0, const class FText& Text);
	static struct FModioNotificationParams CreateInstallationNotification(const struct FModioErrorCode& StatusCode, const TScriptInterface<class IModioModInfoUIDetails>& ModInfo);
	static struct FModioNotificationParams CreateNotificationParams(const struct FModioErrorCode& StatusCode, const class FText& TitleText, const class FText& SuccessText, const class FText& ErrorText);
	static struct FModioNotificationParams CreateRatingNotification(const struct FModioErrorCode& StatusCode, const TScriptInterface<class IModioModInfoUIDetails>& ModInfo);
	static struct FModioNotificationParams CreateSubscriptionNotification(const struct FModioErrorCode& StatusCode, const TScriptInterface<class IModioModInfoUIDetails>& ModInfo);
	static struct FModioNotificationParams CreateUninstallNotification(const struct FModioErrorCode& StatusCode, const TScriptInterface<class IModioModInfoUIDetails>& ModInfo);
	static struct FModioNotificationParams CreateUnsubscriptionNotification(const struct FModioErrorCode& StatusCode, const TScriptInterface<class IModioModInfoUIDetails>& ModInfo);
	static struct FModioNotificationParams SetFloatArg(struct FModioNotificationParams& NotificationParams, const class FString& Name_0, float Value);
	static struct FModioNotificationParams SetIntegerArg(struct FModioNotificationParams& NotificationParams, const class FString& Name_0, int32 Value);
	static struct FModioNotificationParams SetStringArg(struct FModioNotificationParams& NotificationParams, const class FString& Name_0, const class FString& Value);
	static struct FModioNotificationParams SetTextArg(struct FModioNotificationParams& NotificationParams, const class FString& Name_0, const class FText& Text);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioNotificationParamsLibrary">();
	}
	static class UModioNotificationParamsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioNotificationParamsLibrary>();
	}
};
static_assert(alignof(UModioNotificationParamsLibrary) == 0x000008, "Wrong alignment on UModioNotificationParamsLibrary");
static_assert(sizeof(UModioNotificationParamsLibrary) == 0x000028, "Wrong size on UModioNotificationParamsLibrary");

// Class ModioUICore.ModioUINotification
// 0x0000 (0x0028 - 0x0028)
class IModioUINotification final : public IInterface
{
public:
	void Configure(const struct FModioNotificationParams& Params_0);
	void ConfigureManual(const class FText& Title, const class FText& Message, bool bIsError);
	void Display();
	class UWidget* GetAsWidget();
	void SetNotificationExpireHandler(const TDelegate<void(class UWidget* NotificationWidget)>& InDelegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUINotification">();
	}
	static class IModioUINotification* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUINotification>();
	}
};
static_assert(alignof(IModioUINotification) == 0x000008, "Wrong alignment on IModioUINotification");
static_assert(sizeof(IModioUINotification) == 0x000028, "Wrong size on IModioUINotification");

// Class ModioUICore.ModioUINotificationController
// 0x0000 (0x0028 - 0x0028)
class IModioUINotificationController final : public IInterface
{
public:
	void DisplayNotification(const TScriptInterface<class IModioUINotification>& Notification);
	void DisplayNotificationManual(const class FText& Title, const class FText& Message, bool bIsError);
	void DisplayNotificationParams(const struct FModioNotificationParams& Params_0);
	void HandleDisplayManual(const class FText& Title, const class FText& Message, bool bIsError);
	void HandleDisplayNotificationParams(const struct FModioNotificationParams& Params_0);
	void HandleDisplayNotificationWidget(TScriptInterface<class IModioUINotification>* Notification);
	void RegisterUserWidget(const TScriptInterface<class IModioUINotificationController>& ControllerWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUINotificationController">();
	}
	static class IModioUINotificationController* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUINotificationController>();
	}
};
static_assert(alignof(IModioUINotificationController) == 0x000008, "Wrong alignment on IModioUINotificationController");
static_assert(sizeof(IModioUINotificationController) == 0x000028, "Wrong size on IModioUINotificationController");

// Class ModioUICore.ModioUISubscriptionsChangedReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUISubscriptionsChangedReceiver final : public IInterface
{
public:
	void OnSubscriptionsChanged(const struct FModioModID& ModId, bool bNewSubscriptionState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISubscriptionsChangedReceiver">();
	}
	static class IModioUISubscriptionsChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUISubscriptionsChangedReceiver>();
	}
};
static_assert(alignof(IModioUISubscriptionsChangedReceiver) == 0x000008, "Wrong alignment on IModioUISubscriptionsChangedReceiver");
static_assert(sizeof(IModioUISubscriptionsChangedReceiver) == 0x000028, "Wrong size on IModioUISubscriptionsChangedReceiver");

// Class ModioUICore.ModioUIUserAvatarDownloadCompletedReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUIUserAvatarDownloadCompletedReceiver final : public IInterface
{
public:
	void OnUserAvatarDownloadCompleted(const struct FModioErrorCode& Ec, const struct FModioOptionalImage& Image);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIUserAvatarDownloadCompletedReceiver">();
	}
	static class IModioUIUserAvatarDownloadCompletedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIUserAvatarDownloadCompletedReceiver>();
	}
};
static_assert(alignof(IModioUIUserAvatarDownloadCompletedReceiver) == 0x000008, "Wrong alignment on IModioUIUserAvatarDownloadCompletedReceiver");
static_assert(sizeof(IModioUIUserAvatarDownloadCompletedReceiver) == 0x000028, "Wrong size on IModioUIUserAvatarDownloadCompletedReceiver");

// Class ModioUICore.ModioUIUserChangedReceiver
// 0x0000 (0x0028 - 0x0028)
class IModioUIUserChangedReceiver final : public IInterface
{
public:
	void OnUserChanged(const struct FModioOptionalUser& NewUser);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIUserChangedReceiver">();
	}
	static class IModioUIUserChangedReceiver* GetDefaultObj()
	{
		return GetDefaultObjImpl<IModioUIUserChangedReceiver>();
	}
};
static_assert(alignof(IModioUIUserChangedReceiver) == 0x000008, "Wrong alignment on IModioUIUserChangedReceiver");
static_assert(sizeof(IModioUIUserChangedReceiver) == 0x000028, "Wrong size on IModioUIUserChangedReceiver");

// Class ModioUICore.ModioFeaturedCategoryParams
// 0x0048 (0x0070 - 0x0028)
class UModioFeaturedCategoryParams final : public UObject
{
public:
	class FText                                   CategoryName;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExcludedTags;                                      // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EModioSortDirection                           Direction;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModioSortFieldType                           SortField;                                         // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Count;                                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFeaturedCategoryParams">();
	}
	static class UModioFeaturedCategoryParams* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFeaturedCategoryParams>();
	}
};
static_assert(alignof(UModioFeaturedCategoryParams) == 0x000008, "Wrong alignment on UModioFeaturedCategoryParams");
static_assert(sizeof(UModioFeaturedCategoryParams) == 0x000070, "Wrong size on UModioFeaturedCategoryParams");
static_assert(offsetof(UModioFeaturedCategoryParams, CategoryName) == 0x000028, "Member 'UModioFeaturedCategoryParams::CategoryName' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategoryParams, Tags) == 0x000040, "Member 'UModioFeaturedCategoryParams::Tags' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategoryParams, ExcludedTags) == 0x000050, "Member 'UModioFeaturedCategoryParams::ExcludedTags' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategoryParams, Direction) == 0x000060, "Member 'UModioFeaturedCategoryParams::Direction' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategoryParams, SortField) == 0x000061, "Member 'UModioFeaturedCategoryParams::SortField' has a wrong offset!");
static_assert(offsetof(UModioFeaturedCategoryParams, Count) == 0x000068, "Member 'UModioFeaturedCategoryParams::Count' has a wrong offset!");

// Class ModioUICore.ModioFilterParamsUI
// 0x00A8 (0x00D0 - 0x0028)
class UModioFilterParamsUI final : public UObject
{
public:
	struct FModioFilterParams                     Underlying;                                        // 0x0028(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioFilterParamsUI">();
	}
	static class UModioFilterParamsUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioFilterParamsUI>();
	}
};
static_assert(alignof(UModioFilterParamsUI) == 0x000008, "Wrong alignment on UModioFilterParamsUI");
static_assert(sizeof(UModioFilterParamsUI) == 0x0000D0, "Wrong size on UModioFilterParamsUI");
static_assert(offsetof(UModioFilterParamsUI, Underlying) == 0x000028, "Member 'UModioFilterParamsUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioModCategoryParamsUI
// 0x0060 (0x0088 - 0x0028)
class UModioModCategoryParamsUI final : public UObject
{
public:
	struct FModioModCategoryParams                Underlying;                                        // 0x0028(0x0060)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModCategoryParamsUI">();
	}
	static class UModioModCategoryParamsUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModCategoryParamsUI>();
	}
};
static_assert(alignof(UModioModCategoryParamsUI) == 0x000008, "Wrong alignment on UModioModCategoryParamsUI");
static_assert(sizeof(UModioModCategoryParamsUI) == 0x000088, "Wrong size on UModioModCategoryParamsUI");
static_assert(offsetof(UModioModCategoryParamsUI, Underlying) == 0x000028, "Member 'UModioModCategoryParamsUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioModCollectionEntryUI
// 0x0228 (0x0250 - 0x0028)
class UModioModCollectionEntryUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModCollectionEntry               Underlying;                                        // 0x0030(0x0218)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          bCachedSubscriptionStatus;                         // 0x0248(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModCollectionEntryUI">();
	}
	static class UModioModCollectionEntryUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModCollectionEntryUI>();
	}
};
static_assert(alignof(UModioModCollectionEntryUI) == 0x000008, "Wrong alignment on UModioModCollectionEntryUI");
static_assert(sizeof(UModioModCollectionEntryUI) == 0x000250, "Wrong size on UModioModCollectionEntryUI");
static_assert(offsetof(UModioModCollectionEntryUI, Underlying) == 0x000030, "Member 'UModioModCollectionEntryUI::Underlying' has a wrong offset!");
static_assert(offsetof(UModioModCollectionEntryUI, bCachedSubscriptionStatus) == 0x000248, "Member 'UModioModCollectionEntryUI::bCachedSubscriptionStatus' has a wrong offset!");

// Class ModioUICore.ModioModInfoUI
// 0x01E8 (0x0210 - 0x0028)
class UModioModInfoUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModInfo                          Underlying;                                        // 0x0030(0x01E0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioModInfoUI">();
	}
	static class UModioModInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioModInfoUI>();
	}
};
static_assert(alignof(UModioModInfoUI) == 0x000008, "Wrong alignment on UModioModInfoUI");
static_assert(sizeof(UModioModInfoUI) == 0x000210, "Wrong size on UModioModInfoUI");
static_assert(offsetof(UModioModInfoUI, Underlying) == 0x000030, "Member 'UModioModInfoUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioReportInfoUI
// 0x0068 (0x0090 - 0x0028)
class UModioReportInfoUI final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioReportParams                     ReportData;                                        // 0x0030(0x0058)(NativeAccessSpecifierPublic)
	class UObject*                                ModInfo;                                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioReportInfoUI">();
	}
	static class UModioReportInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioReportInfoUI>();
	}
};
static_assert(alignof(UModioReportInfoUI) == 0x000008, "Wrong alignment on UModioReportInfoUI");
static_assert(sizeof(UModioReportInfoUI) == 0x000090, "Wrong size on UModioReportInfoUI");
static_assert(offsetof(UModioReportInfoUI, ReportData) == 0x000030, "Member 'UModioReportInfoUI::ReportData' has a wrong offset!");
static_assert(offsetof(UModioReportInfoUI, ModInfo) == 0x000088, "Member 'UModioReportInfoUI::ModInfo' has a wrong offset!");

// Class ModioUICore.ModioTagInfoUI
// 0x0038 (0x0060 - 0x0028)
class UModioTagInfoUI final : public UObject
{
public:
	struct FModioModTagInfo                       Underlying;                                        // 0x0028(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagInfoUI">();
	}
	static class UModioTagInfoUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagInfoUI>();
	}
};
static_assert(alignof(UModioTagInfoUI) == 0x000008, "Wrong alignment on UModioTagInfoUI");
static_assert(sizeof(UModioTagInfoUI) == 0x000060, "Wrong size on UModioTagInfoUI");
static_assert(offsetof(UModioTagInfoUI, Underlying) == 0x000028, "Member 'UModioTagInfoUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioTagOptionsUI
// 0x0038 (0x0060 - 0x0028)
class UModioTagOptionsUI final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModioModTagOptions                    Underlying;                                        // 0x0038(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<class UModioTagInfoUI*> GetTagCategoriesForUI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioTagOptionsUI">();
	}
	static class UModioTagOptionsUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioTagOptionsUI>();
	}
};
static_assert(alignof(UModioTagOptionsUI) == 0x000008, "Wrong alignment on UModioTagOptionsUI");
static_assert(sizeof(UModioTagOptionsUI) == 0x000060, "Wrong size on UModioTagOptionsUI");
static_assert(offsetof(UModioTagOptionsUI, Underlying) == 0x000038, "Member 'UModioTagOptionsUI::Underlying' has a wrong offset!");

// Class ModioUICore.ModioUIAsyncLoader
// 0x0078 (0x01C8 - 0x0150)
class UModioUIAsyncLoader : public UWidget
{
public:
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EModioUIAsyncOperationWidgetState             CurrentState;                                      // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UWidget*>             NamedWidgets;                                      // 0x0168(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NativeHandleAsyncOperationStateChange(EModioUIAsyncOperationWidgetState NewState);
	void OnRetryRequested();
	void Retry();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUIAsyncLoader">();
	}
	static class UModioUIAsyncLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUIAsyncLoader>();
	}
};
static_assert(alignof(UModioUIAsyncLoader) == 0x000008, "Wrong alignment on UModioUIAsyncLoader");
static_assert(sizeof(UModioUIAsyncLoader) == 0x0001C8, "Wrong size on UModioUIAsyncLoader");
static_assert(offsetof(UModioUIAsyncLoader, CurrentState) == 0x000160, "Member 'UModioUIAsyncLoader::CurrentState' has a wrong offset!");
static_assert(offsetof(UModioUIAsyncLoader, NamedWidgets) == 0x000168, "Member 'UModioUIAsyncLoader::NamedWidgets' has a wrong offset!");

// Class ModioUICore.ModioUISubsystem
// 0x0268 (0x0298 - 0x0030)
class UModioUISubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_30[0x1C8];                                     // 0x0030(0x01C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ModBrowserInstance;                                // 0x01F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_200[0x60];                                     // 0x0200(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnModEnabledChanged;                               // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FModioModID& Mod)> GetModEnabledDelegate;                             // 0x0270(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x18];                                     // 0x0280(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CloseModBrowserUI();
	void DisplayErrorDialog(const struct FModioErrorCode& ErrorCode);
	void DisplayNotification(TScriptInterface<class IModioUINotification>& Notification);
	void DisplayNotificationManual(const class FText& Title, const class FText& Message, bool bIsError);
	void DisplayNotificationParams(const struct FModioNotificationParams& Params_0);
	void ExecuteOnModBrowserCloseRequestedDelegate();
	class FText FormatText(const class FText& Input);
	float GetCurrentDPIScaleValue();
	bool GetIsCollectionModDisableUIEnabled();
	void HideModBrowserUI();
	bool QueryIsModEnabled(const struct FModioModID& ID);
	void RequestEmailAuthentication(const struct FModioEmailAuthCode& Code);
	void RequestExternalAuthentication(EModioAuthenticationProvider Provider);
	void RequestGalleryImageDownloadForModID(const struct FModioModID& ID, int32 Index_0, EModioGallerySize ImageSize);
	void RequestListAllMods(const struct FModioFilterParams& Params_0, const class FString& RequestIdentifier);
	void RequestLogoDownloadForModID(const struct FModioModID& ID, EModioLogoSize LogoSize);
	bool RequestModEnabledState(const struct FModioModID& ID, bool bNewEnabledState);
	void RequestModInfoForModIDs(const TArray<struct FModioModID>& IDs);
	void RequestRemoveSubscriptionForModID(const struct FModioModID& ID);
	void RequestSubscriptionForModID(const struct FModioModID& ID);
	void RequestUserAvatar();
	void ShowDetailsForMod(const struct FModioModID& ID);
	void ShowDialog(class UObject* DialogDataSource);
	class UUserWidget* ShowModBrowserUIForPlayer(TSubclassOf<class UUserWidget> MenuClass, class APlayerController* Controller, TDelegate<void()> OnModBrowserCloseRequestedDelegate);
	bool ShowSearchResults(const struct FModioModCategoryParams& SearchParameters);
	void SubscriptionHandler(const struct FModioErrorCode& ErrorCode, const struct FModioModID& ID);
	void UninstallHandler(const struct FModioErrorCode& ErrorCode, const struct FModioModID& ID);
	void UnsubscribeHandler(const struct FModioErrorCode& ErrorCode, const struct FModioModID& ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModioUISubsystem">();
	}
	static class UModioUISubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModioUISubsystem>();
	}
};
static_assert(alignof(UModioUISubsystem) == 0x000008, "Wrong alignment on UModioUISubsystem");
static_assert(sizeof(UModioUISubsystem) == 0x000298, "Wrong size on UModioUISubsystem");
static_assert(offsetof(UModioUISubsystem, ModBrowserInstance) == 0x0001F8, "Member 'UModioUISubsystem::ModBrowserInstance' has a wrong offset!");
static_assert(offsetof(UModioUISubsystem, OnModEnabledChanged) == 0x000260, "Member 'UModioUISubsystem::OnModEnabledChanged' has a wrong offset!");
static_assert(offsetof(UModioUISubsystem, GetModEnabledDelegate) == 0x000270, "Member 'UModioUISubsystem::GetModEnabledDelegate' has a wrong offset!");

}

