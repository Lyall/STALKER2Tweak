#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_vil_cart_wooden_01

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_vil_cart_wooden_01.BP_vil_cart_wooden_01_C
// 0x0148 (0x03E0 - 0x0298)
class ABP_vil_cart_wooden_01_C final : public AActor
{
public:
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_rear_part;               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_front_part1;             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_side_R;                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_front_part;              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_side_L;                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_wheel_wood_02;           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_wheel_wood;              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_wheel_02;                // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_wheel;                   // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_floor_b;                 // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_floor_a;                 // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_vil_gen_cart_wooden_01_body;                    // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Color;                                             // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rust_and_wear;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Dust;                                              // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_BL_Angle;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LeftFirstHatch;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        LeftBackHatch;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        RightFirstHatch;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        RightBackHatch;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_R_angle;                                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Door_R_open;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_L_open;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_FL_Angle;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_BR_Angle;                                     // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        FrontHatchAngle;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FColor>                         ArrColors;                                         // 0x0370(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         ColorID;                                           // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         InteriorLvLDetails;                                // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MaxAttachmentElements;                             // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Randimize;                                         // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Update_ZVector;                                    // 0x038D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Window_RB;                                         // 0x038E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Window_RF;                                         // 0x038F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Wheel_FR;                                          // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wheel_FL;                                          // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelBR;                                           // 0x0392(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelBL;                                           // 0x0393(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hatch_LF;                                          // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Hatch_LB;                                          // 0x0395(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Door_R;                                            // 0x0396(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Door_L;                                            // 0x0397(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Window_F;                                          // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Door_BL;                                           // 0x0399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Hatch_RB;                                          // 0x039A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Hatch_RF;                                          // 0x039B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Door_BR;                                           // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Window_LF;                                         // 0x039D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Window_LB;                                         // 0x039E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          OneChosenInteriorMesh;                             // 0x039F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  AttachmentMass;                                    // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  FinalAttachmentMass;                               // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 IndecsesTrueAtachments;                            // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           FinalAttachMeshMass;                               // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_vil_cart_wooden_01_C">();
	}
	static class ABP_vil_cart_wooden_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_vil_cart_wooden_01_C>();
	}
};
static_assert(alignof(ABP_vil_cart_wooden_01_C) == 0x000008, "Wrong alignment on ABP_vil_cart_wooden_01_C");
static_assert(sizeof(ABP_vil_cart_wooden_01_C) == 0x0003E0, "Wrong size on ABP_vil_cart_wooden_01_C");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_rear_part) == 0x000298, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_rear_part' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_front_part1) == 0x0002A0, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_front_part1' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_side_R) == 0x0002A8, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_side_R' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_front_part) == 0x0002B0, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_front_part' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_side_L) == 0x0002B8, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_side_L' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_wheel_wood_02) == 0x0002C0, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_wheel_wood_02' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_wheel_wood) == 0x0002C8, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_wheel_wood' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_wheel_02) == 0x0002D0, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_wheel_02' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_wheel) == 0x0002D8, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_wheel' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_floor_b) == 0x0002E0, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_floor_b' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_floor_a) == 0x0002E8, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_floor_a' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, SM_vil_gen_cart_wooden_01_body) == 0x0002F0, "Member 'ABP_vil_cart_wooden_01_C::SM_vil_gen_cart_wooden_01_body' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, DefaultSceneRoot) == 0x0002F8, "Member 'ABP_vil_cart_wooden_01_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Color) == 0x000300, "Member 'ABP_vil_cart_wooden_01_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Rust_and_wear) == 0x000308, "Member 'ABP_vil_cart_wooden_01_C::Rust_and_wear' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Dust) == 0x000310, "Member 'ABP_vil_cart_wooden_01_C::Dust' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_BL_Angle) == 0x000318, "Member 'ABP_vil_cart_wooden_01_C::Door_BL_Angle' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, LeftFirstHatch) == 0x000320, "Member 'ABP_vil_cart_wooden_01_C::LeftFirstHatch' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, LeftBackHatch) == 0x000328, "Member 'ABP_vil_cart_wooden_01_C::LeftBackHatch' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, RightFirstHatch) == 0x000330, "Member 'ABP_vil_cart_wooden_01_C::RightFirstHatch' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, RightBackHatch) == 0x000338, "Member 'ABP_vil_cart_wooden_01_C::RightBackHatch' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_R_angle) == 0x000340, "Member 'ABP_vil_cart_wooden_01_C::Door_R_angle' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_R_open) == 0x000348, "Member 'ABP_vil_cart_wooden_01_C::Door_R_open' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_L_open) == 0x000350, "Member 'ABP_vil_cart_wooden_01_C::Door_L_open' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_FL_Angle) == 0x000358, "Member 'ABP_vil_cart_wooden_01_C::Door_FL_Angle' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_BR_Angle) == 0x000360, "Member 'ABP_vil_cart_wooden_01_C::Door_BR_Angle' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, FrontHatchAngle) == 0x000368, "Member 'ABP_vil_cart_wooden_01_C::FrontHatchAngle' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, ArrColors) == 0x000370, "Member 'ABP_vil_cart_wooden_01_C::ArrColors' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, ColorID) == 0x000380, "Member 'ABP_vil_cart_wooden_01_C::ColorID' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, InteriorLvLDetails) == 0x000384, "Member 'ABP_vil_cart_wooden_01_C::InteriorLvLDetails' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, MaxAttachmentElements) == 0x000388, "Member 'ABP_vil_cart_wooden_01_C::MaxAttachmentElements' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Randimize) == 0x00038C, "Member 'ABP_vil_cart_wooden_01_C::Randimize' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Update_ZVector) == 0x00038D, "Member 'ABP_vil_cart_wooden_01_C::Update_ZVector' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Window_RB) == 0x00038E, "Member 'ABP_vil_cart_wooden_01_C::Window_RB' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Window_RF) == 0x00038F, "Member 'ABP_vil_cart_wooden_01_C::Window_RF' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Wheel_FR) == 0x000390, "Member 'ABP_vil_cart_wooden_01_C::Wheel_FR' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Wheel_FL) == 0x000391, "Member 'ABP_vil_cart_wooden_01_C::Wheel_FL' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, WheelBR) == 0x000392, "Member 'ABP_vil_cart_wooden_01_C::WheelBR' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, WheelBL) == 0x000393, "Member 'ABP_vil_cart_wooden_01_C::WheelBL' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Hatch_LF) == 0x000394, "Member 'ABP_vil_cart_wooden_01_C::Hatch_LF' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Hatch_LB) == 0x000395, "Member 'ABP_vil_cart_wooden_01_C::Hatch_LB' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_R) == 0x000396, "Member 'ABP_vil_cart_wooden_01_C::Door_R' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_L) == 0x000397, "Member 'ABP_vil_cart_wooden_01_C::Door_L' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Window_F) == 0x000398, "Member 'ABP_vil_cart_wooden_01_C::Window_F' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_BL) == 0x000399, "Member 'ABP_vil_cart_wooden_01_C::Door_BL' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Hatch_RB) == 0x00039A, "Member 'ABP_vil_cart_wooden_01_C::Hatch_RB' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Hatch_RF) == 0x00039B, "Member 'ABP_vil_cart_wooden_01_C::Hatch_RF' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Door_BR) == 0x00039C, "Member 'ABP_vil_cart_wooden_01_C::Door_BR' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Window_LF) == 0x00039D, "Member 'ABP_vil_cart_wooden_01_C::Window_LF' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, Window_LB) == 0x00039E, "Member 'ABP_vil_cart_wooden_01_C::Window_LB' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, OneChosenInteriorMesh) == 0x00039F, "Member 'ABP_vil_cart_wooden_01_C::OneChosenInteriorMesh' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, AttachmentMass) == 0x0003A0, "Member 'ABP_vil_cart_wooden_01_C::AttachmentMass' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, FinalAttachmentMass) == 0x0003B0, "Member 'ABP_vil_cart_wooden_01_C::FinalAttachmentMass' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, IndecsesTrueAtachments) == 0x0003C0, "Member 'ABP_vil_cart_wooden_01_C::IndecsesTrueAtachments' has a wrong offset!");
static_assert(offsetof(ABP_vil_cart_wooden_01_C, FinalAttachMeshMass) == 0x0003D0, "Member 'ABP_vil_cart_wooden_01_C::FinalAttachMeshMass' has a wrong offset!");

}

