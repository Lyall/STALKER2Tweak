#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WwiseObstructionOcclusion

#include "Basic.hpp"

#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class WwiseObstructionOcclusion.ObstructionOcclusionSettings
// 0x0040 (0x0078 - 0x0038)
class UObstructionOcclusionSettings final : public UDeveloperSettings
{
public:
	float                                         ObjectDimensionLowerBound;                         // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectDimensionUpperBound;                         // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectDimensionOmitCount;                          // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxObjectsToAccount;                               // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SameOutdoorRoomMin;                                // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SameOutdoorRoomMax;                                // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SameIndoorRoomMin;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SameIndoorRoomMax;                                 // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifferentOutdoorRoomsMin;                          // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifferentOutdoorRoomsMax;                          // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifferentIndoorRoomsMin;                           // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DifferentIndoorRoomsMax;                           // 0x0064(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromOutdoorToIndoorRoomMin;                        // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromOutdoorToIndoorRoomMax;                        // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromIndoorToOutdoorRoomMin;                        // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromIndoorToOutdoorRoomMax;                        // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObstructionOcclusionSettings">();
	}
	static class UObstructionOcclusionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObstructionOcclusionSettings>();
	}
};
static_assert(alignof(UObstructionOcclusionSettings) == 0x000008, "Wrong alignment on UObstructionOcclusionSettings");
static_assert(sizeof(UObstructionOcclusionSettings) == 0x000078, "Wrong size on UObstructionOcclusionSettings");
static_assert(offsetof(UObstructionOcclusionSettings, ObjectDimensionLowerBound) == 0x000038, "Member 'UObstructionOcclusionSettings::ObjectDimensionLowerBound' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, ObjectDimensionUpperBound) == 0x00003C, "Member 'UObstructionOcclusionSettings::ObjectDimensionUpperBound' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, ObjectDimensionOmitCount) == 0x000040, "Member 'UObstructionOcclusionSettings::ObjectDimensionOmitCount' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, MaxObjectsToAccount) == 0x000044, "Member 'UObstructionOcclusionSettings::MaxObjectsToAccount' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, SameOutdoorRoomMin) == 0x000048, "Member 'UObstructionOcclusionSettings::SameOutdoorRoomMin' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, SameOutdoorRoomMax) == 0x00004C, "Member 'UObstructionOcclusionSettings::SameOutdoorRoomMax' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, SameIndoorRoomMin) == 0x000050, "Member 'UObstructionOcclusionSettings::SameIndoorRoomMin' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, SameIndoorRoomMax) == 0x000054, "Member 'UObstructionOcclusionSettings::SameIndoorRoomMax' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, DifferentOutdoorRoomsMin) == 0x000058, "Member 'UObstructionOcclusionSettings::DifferentOutdoorRoomsMin' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, DifferentOutdoorRoomsMax) == 0x00005C, "Member 'UObstructionOcclusionSettings::DifferentOutdoorRoomsMax' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, DifferentIndoorRoomsMin) == 0x000060, "Member 'UObstructionOcclusionSettings::DifferentIndoorRoomsMin' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, DifferentIndoorRoomsMax) == 0x000064, "Member 'UObstructionOcclusionSettings::DifferentIndoorRoomsMax' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, FromOutdoorToIndoorRoomMin) == 0x000068, "Member 'UObstructionOcclusionSettings::FromOutdoorToIndoorRoomMin' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, FromOutdoorToIndoorRoomMax) == 0x00006C, "Member 'UObstructionOcclusionSettings::FromOutdoorToIndoorRoomMax' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, FromIndoorToOutdoorRoomMin) == 0x000070, "Member 'UObstructionOcclusionSettings::FromIndoorToOutdoorRoomMin' has a wrong offset!");
static_assert(offsetof(UObstructionOcclusionSettings, FromIndoorToOutdoorRoomMax) == 0x000074, "Member 'UObstructionOcclusionSettings::FromIndoorToOutdoorRoomMax' has a wrong offset!");

}

