#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FlyCorridor

#include "Basic.hpp"

#include "MotionWarping_classes.hpp"
#include "FlyCorridor_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class FlyCorridor.AnimMetaData_FlyCorridor
// 0x00E8 (0x0110 - 0x0028)
class UAnimMetaData_FlyCorridor final : public UAnimMetaData
{
public:
	TArray<struct FFlyCorridorTracePoint>         FlyCorridorAnimPoints;                             // 0x0028(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FFlyCorridorTracePoint                 AnimHitPoint;                                      // 0x0038(0x0020)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FFloatCurve                            DistanceCurve;                                     // 0x0058(0x0098)(Protected, NativeAccessSpecifierProtected)
	bool                                          bDoScaleZ;                                         // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndLocation;                                       // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimMetaData_FlyCorridor">();
	}
	static class UAnimMetaData_FlyCorridor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimMetaData_FlyCorridor>();
	}
};
static_assert(alignof(UAnimMetaData_FlyCorridor) == 0x000008, "Wrong alignment on UAnimMetaData_FlyCorridor");
static_assert(sizeof(UAnimMetaData_FlyCorridor) == 0x000110, "Wrong size on UAnimMetaData_FlyCorridor");
static_assert(offsetof(UAnimMetaData_FlyCorridor, FlyCorridorAnimPoints) == 0x000028, "Member 'UAnimMetaData_FlyCorridor::FlyCorridorAnimPoints' has a wrong offset!");
static_assert(offsetof(UAnimMetaData_FlyCorridor, AnimHitPoint) == 0x000038, "Member 'UAnimMetaData_FlyCorridor::AnimHitPoint' has a wrong offset!");
static_assert(offsetof(UAnimMetaData_FlyCorridor, DistanceCurve) == 0x000058, "Member 'UAnimMetaData_FlyCorridor::DistanceCurve' has a wrong offset!");
static_assert(offsetof(UAnimMetaData_FlyCorridor, bDoScaleZ) == 0x0000F0, "Member 'UAnimMetaData_FlyCorridor::bDoScaleZ' has a wrong offset!");
static_assert(offsetof(UAnimMetaData_FlyCorridor, EndLocation) == 0x0000F8, "Member 'UAnimMetaData_FlyCorridor::EndLocation' has a wrong offset!");

// Class FlyCorridor.AnimNotifyState_Fly
// 0x0010 (0x0048 - 0x0038)
class UAnimNotifyState_Fly final : public UAnimNotifyState_MotionWarping
{
public:
	class FName                                   TrackBoneName;                                     // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootBoneName;                                      // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_Fly">();
	}
	static class UAnimNotifyState_Fly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_Fly>();
	}
};
static_assert(alignof(UAnimNotifyState_Fly) == 0x000008, "Wrong alignment on UAnimNotifyState_Fly");
static_assert(sizeof(UAnimNotifyState_Fly) == 0x000048, "Wrong size on UAnimNotifyState_Fly");
static_assert(offsetof(UAnimNotifyState_Fly, TrackBoneName) == 0x000038, "Member 'UAnimNotifyState_Fly::TrackBoneName' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_Fly, RootBoneName) == 0x000040, "Member 'UAnimNotifyState_Fly::RootBoneName' has a wrong offset!");

// Class FlyCorridor.AnimNotify_FlyHitPoint
// 0x0000 (0x0038 - 0x0038)
class UAnimNotify_FlyHitPoint final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_FlyHitPoint">();
	}
	static class UAnimNotify_FlyHitPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_FlyHitPoint>();
	}
};
static_assert(alignof(UAnimNotify_FlyHitPoint) == 0x000008, "Wrong alignment on UAnimNotify_FlyHitPoint");
static_assert(sizeof(UAnimNotify_FlyHitPoint) == 0x000038, "Wrong size on UAnimNotify_FlyHitPoint");

// Class FlyCorridor.FlyCorridorDebugComponent
// 0x0050 (0x0600 - 0x05B0)
class UFlyCorridorDebugComponent final : public UDebugDrawComponent
{
public:
	uint8                                         Pad_5B0[0x1C];                                     // 0x05B0(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CorridorFindingTime;                               // 0x05CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D0[0x30];                                     // 0x05D0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HideCorridor();
	void HidePassedPath();
	void ShowCorridor(const class UAnimMontage* AnimMontage, const struct FVector& StartLocation, const struct FVector& EndLocation, float DrawTime, double ZScale);
	void ShowPassedPath();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlyCorridorDebugComponent">();
	}
	static class UFlyCorridorDebugComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlyCorridorDebugComponent>();
	}
};
static_assert(alignof(UFlyCorridorDebugComponent) == 0x000010, "Wrong alignment on UFlyCorridorDebugComponent");
static_assert(sizeof(UFlyCorridorDebugComponent) == 0x000600, "Wrong size on UFlyCorridorDebugComponent");
static_assert(offsetof(UFlyCorridorDebugComponent, CorridorFindingTime) == 0x0005CC, "Member 'UFlyCorridorDebugComponent::CorridorFindingTime' has a wrong offset!");

}

