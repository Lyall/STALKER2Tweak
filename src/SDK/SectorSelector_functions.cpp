#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SectorSelector

#include "Basic.hpp"

#include "SectorSelector_classes.hpp"
#include "SectorSelector_parameters.hpp"


namespace SDK
{

// Function SectorSelector.TargetMeleeSectorComponent.IsHandlesEqual
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// struct FSectorSelectionHandle           Handle1                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSectorSelectionHandle           Handle2                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsHandlesEqual(const struct FSectorSelectionHandle& Handle1, const struct FSectorSelectionHandle& Handle2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetMeleeSectorComponent", "IsHandlesEqual");

	Params::TargetMeleeSectorComponent_IsHandlesEqual Parms{};

	Parms.Handle1 = std::move(Handle1);
	Parms.Handle2 = std::move(Handle2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.IsHandleValid
// (Final, Native, Static, Protected, BlueprintCallable)
// Parameters:
// struct FSectorSelectionHandle           Handle                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsHandleValid(const struct FSectorSelectionHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TargetMeleeSectorComponent", "IsHandleValid");

	Params::TargetMeleeSectorComponent_IsHandleValid Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.ClaimSector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SectorId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSectorSelectionHandle           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSectorSelectionHandle UTargetMeleeSectorComponent::ClaimSector(int32 SectorId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "ClaimSector");

	Params::TargetMeleeSectorComponent_ClaimSector Parms{};

	Parms.SectorId = SectorId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.ClaimSectorsByMask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   RequestedBitmaskOfOccupiedSectors                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClaimIfObstructed                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceClaim                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSectorSelectionHandle           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSectorSelectionHandle UTargetMeleeSectorComponent::ClaimSectorsByMask(int64 RequestedBitmaskOfOccupiedSectors, bool bClaimIfObstructed, bool bForceClaim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "ClaimSectorsByMask");

	Params::TargetMeleeSectorComponent_ClaimSectorsByMask Parms{};

	Parms.RequestedBitmaskOfOccupiedSectors = RequestedBitmaskOfOccupiedSectors;
	Parms.bClaimIfObstructed = bClaimIfObstructed;
	Parms.bForceClaim = bForceClaim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.ClaimSectorsInRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MinIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSectorSelectionHandle           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSectorSelectionHandle UTargetMeleeSectorComponent::ClaimSectorsInRange(int32 MinIndex, int32 MaxIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "ClaimSectorsInRange");

	Params::TargetMeleeSectorComponent_ClaimSectorsInRange Parms{};

	Parms.MinIndex = MinIndex;
	Parms.MaxIndex = MaxIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.ReleaseSector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSectorSelectionHandle           Handle                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::ReleaseSector(const struct FSectorSelectionHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "ReleaseSector");

	Params::TargetMeleeSectorComponent_ReleaseSector Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.FindDesiredSectorForPathBlueprint
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSelectedSector                  SelectedSector                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UNavigationPath*                  Path                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SectorsNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::FindDesiredSectorForPathBlueprint(struct FSelectedSector* SelectedSector, class UNavigationPath* Path, int32 SectorsNum) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "FindDesiredSectorForPathBlueprint");

	Params::TargetMeleeSectorComponent_FindDesiredSectorForPathBlueprint Parms{};

	Parms.Path = Path;
	Parms.SectorsNum = SectorsNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SelectedSector != nullptr)
		*SelectedSector = std::move(Parms.SelectedSector);

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.IsAllSectorsFree
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   SectorsBitmask                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsAllSectorsFree(int64 SectorsBitmask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "IsAllSectorsFree");

	Params::TargetMeleeSectorComponent_IsAllSectorsFree Parms{};

	Parms.SectorsBitmask = SectorsBitmask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.IsAllSectorsFreeIfRemove
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   SectorsBitmask                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   RemoveBitmask                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsAllSectorsFreeIfRemove(int64 SectorsBitmask, int64 RemoveBitmask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "IsAllSectorsFreeIfRemove");

	Params::TargetMeleeSectorComponent_IsAllSectorsFreeIfRemove Parms{};

	Parms.SectorsBitmask = SectorsBitmask;
	Parms.RemoveBitmask = RemoveBitmask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.IsAnyOfSectorsObstructed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   SectorsBitmask                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsAnyOfSectorsObstructed(int64 SectorsBitmask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "IsAnyOfSectorsObstructed");

	Params::TargetMeleeSectorComponent_IsAnyOfSectorsObstructed Parms{};

	Parms.SectorsBitmask = SectorsBitmask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.IsLocationInsideSectorWithPrecision
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   SectorsBitmask                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnglePrecision                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsLocationInsideSectorWithPrecision(const struct FVector& Location, const int64 SectorsBitmask, float AnglePrecision) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "IsLocationInsideSectorWithPrecision");

	Params::TargetMeleeSectorComponent_IsLocationInsideSectorWithPrecision Parms{};

	Parms.Location = std::move(Location);
	Parms.SectorsBitmask = SectorsBitmask;
	Parms.AnglePrecision = AnglePrecision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.IsSectorFree
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SectorId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsSectorFree(int32 SectorId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "IsSectorFree");

	Params::TargetMeleeSectorComponent_IsSectorFree Parms{};

	Parms.SectorId = SectorId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SectorSelector.TargetMeleeSectorComponent.IsSectorObstructed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SectorId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTargetMeleeSectorComponent::IsSectorObstructed(int32 SectorId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TargetMeleeSectorComponent", "IsSectorObstructed");

	Params::TargetMeleeSectorComponent_IsSectorObstructed Parms{};

	Parms.SectorId = SectorId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

