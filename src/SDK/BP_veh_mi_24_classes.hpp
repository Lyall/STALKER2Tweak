#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_veh_mi_24

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_veh_mi_24.BP_veh_mi_24_C
// 0x0130 (0x03C8 - 0x0298)
class ABP_veh_mi_24_C final : public AActor
{
public:
	class UStaticMeshComponent*                   SM_veh_air_mi24_body_glass;                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_veh_air_mi24_rear_rotor;                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_veh_air_mi24_main_rotor;                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_veh_air_mi24_body;                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Color;                                             // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rust_and_wear;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dust;                                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Door_FL_open;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_FR_open;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_FL_sagging;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        Door_FR_sagging;                                   // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        hood_angle;                                        // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        HatchAnge;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        FrontBamperAngle;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        BackBamperAngle;                                   // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        HatchAngle;                                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FColor>                         ArrColors;                                         // 0x0320(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         ColorID;                                           // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         InteriorLvLDetails;                                // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         MaxAttachmentElements;                             // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Randimize;                                         // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Update_ZVector;                                    // 0x033D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Door_FL;                                           // 0x033E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Door_FR;                                           // 0x033F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Wheel_FR;                                          // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wheel_FL;                                          // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelBR;                                           // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelBL;                                           // 0x0343(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hood;                                              // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hatch1;                                            // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          BackBamper;                                        // 0x0346(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Undercarrige;                                      // 0x0347(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          FrontBumper;                                       // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IntriorDetails01;                                  // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IntriorDetails02;                                  // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          EteriorDetails1;                                   // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          EteriorDetails2;                                   // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_34D[0x3];                                      // 0x034D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  InteriorMass;                                      // 0x0350(0x0010)(Edit, BlueprintVisible)
	int32                                         CurrentInteriorLvLDetails;                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        door_FR_angle;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Door_FL_open_Angle;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OneChosenInteriorMesh;                             // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  AttachmentMass;                                    // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  FinalAttachmentMass;                               // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 IndecsesTrueAtachments;                            // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           FinalAttachMeshMass;                               // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          SecondChosenInteriorMesh;                          // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_veh_mi_24_C">();
	}
	static class ABP_veh_mi_24_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_veh_mi_24_C>();
	}
};
static_assert(alignof(ABP_veh_mi_24_C) == 0x000008, "Wrong alignment on ABP_veh_mi_24_C");
static_assert(sizeof(ABP_veh_mi_24_C) == 0x0003C8, "Wrong size on ABP_veh_mi_24_C");
static_assert(offsetof(ABP_veh_mi_24_C, SM_veh_air_mi24_body_glass) == 0x000298, "Member 'ABP_veh_mi_24_C::SM_veh_air_mi24_body_glass' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, SM_veh_air_mi24_rear_rotor) == 0x0002A0, "Member 'ABP_veh_mi_24_C::SM_veh_air_mi24_rear_rotor' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, SM_veh_air_mi24_main_rotor) == 0x0002A8, "Member 'ABP_veh_mi_24_C::SM_veh_air_mi24_main_rotor' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, SM_veh_air_mi24_body) == 0x0002B0, "Member 'ABP_veh_mi_24_C::SM_veh_air_mi24_body' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_veh_mi_24_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Color) == 0x0002C0, "Member 'ABP_veh_mi_24_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Rust_and_wear) == 0x0002C8, "Member 'ABP_veh_mi_24_C::Rust_and_wear' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Dust) == 0x0002D0, "Member 'ABP_veh_mi_24_C::Dust' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Door_FL_open) == 0x0002D8, "Member 'ABP_veh_mi_24_C::Door_FL_open' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Door_FR_open) == 0x0002E0, "Member 'ABP_veh_mi_24_C::Door_FR_open' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Door_FL_sagging) == 0x0002E8, "Member 'ABP_veh_mi_24_C::Door_FL_sagging' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Door_FR_sagging) == 0x0002F0, "Member 'ABP_veh_mi_24_C::Door_FR_sagging' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, hood_angle) == 0x0002F8, "Member 'ABP_veh_mi_24_C::hood_angle' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, HatchAnge) == 0x000300, "Member 'ABP_veh_mi_24_C::HatchAnge' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, FrontBamperAngle) == 0x000308, "Member 'ABP_veh_mi_24_C::FrontBamperAngle' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, BackBamperAngle) == 0x000310, "Member 'ABP_veh_mi_24_C::BackBamperAngle' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, HatchAngle) == 0x000318, "Member 'ABP_veh_mi_24_C::HatchAngle' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, ArrColors) == 0x000320, "Member 'ABP_veh_mi_24_C::ArrColors' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, ColorID) == 0x000330, "Member 'ABP_veh_mi_24_C::ColorID' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, InteriorLvLDetails) == 0x000334, "Member 'ABP_veh_mi_24_C::InteriorLvLDetails' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, MaxAttachmentElements) == 0x000338, "Member 'ABP_veh_mi_24_C::MaxAttachmentElements' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Randimize) == 0x00033C, "Member 'ABP_veh_mi_24_C::Randimize' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Update_ZVector) == 0x00033D, "Member 'ABP_veh_mi_24_C::Update_ZVector' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Door_FL) == 0x00033E, "Member 'ABP_veh_mi_24_C::Door_FL' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Door_FR) == 0x00033F, "Member 'ABP_veh_mi_24_C::Door_FR' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Wheel_FR) == 0x000340, "Member 'ABP_veh_mi_24_C::Wheel_FR' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Wheel_FL) == 0x000341, "Member 'ABP_veh_mi_24_C::Wheel_FL' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, WheelBR) == 0x000342, "Member 'ABP_veh_mi_24_C::WheelBR' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, WheelBL) == 0x000343, "Member 'ABP_veh_mi_24_C::WheelBL' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Hood) == 0x000344, "Member 'ABP_veh_mi_24_C::Hood' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Hatch1) == 0x000345, "Member 'ABP_veh_mi_24_C::Hatch1' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, BackBamper) == 0x000346, "Member 'ABP_veh_mi_24_C::BackBamper' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Undercarrige) == 0x000347, "Member 'ABP_veh_mi_24_C::Undercarrige' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, FrontBumper) == 0x000348, "Member 'ABP_veh_mi_24_C::FrontBumper' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, IntriorDetails01) == 0x000349, "Member 'ABP_veh_mi_24_C::IntriorDetails01' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, IntriorDetails02) == 0x00034A, "Member 'ABP_veh_mi_24_C::IntriorDetails02' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, EteriorDetails1) == 0x00034B, "Member 'ABP_veh_mi_24_C::EteriorDetails1' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, EteriorDetails2) == 0x00034C, "Member 'ABP_veh_mi_24_C::EteriorDetails2' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, InteriorMass) == 0x000350, "Member 'ABP_veh_mi_24_C::InteriorMass' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, CurrentInteriorLvLDetails) == 0x000360, "Member 'ABP_veh_mi_24_C::CurrentInteriorLvLDetails' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, door_FR_angle) == 0x000368, "Member 'ABP_veh_mi_24_C::door_FR_angle' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, Door_FL_open_Angle) == 0x000370, "Member 'ABP_veh_mi_24_C::Door_FL_open_Angle' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, OneChosenInteriorMesh) == 0x000378, "Member 'ABP_veh_mi_24_C::OneChosenInteriorMesh' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, AttachmentMass) == 0x000380, "Member 'ABP_veh_mi_24_C::AttachmentMass' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, FinalAttachmentMass) == 0x000390, "Member 'ABP_veh_mi_24_C::FinalAttachmentMass' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, IndecsesTrueAtachments) == 0x0003A0, "Member 'ABP_veh_mi_24_C::IndecsesTrueAtachments' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, FinalAttachMeshMass) == 0x0003B0, "Member 'ABP_veh_mi_24_C::FinalAttachMeshMass' has a wrong offset!");
static_assert(offsetof(ABP_veh_mi_24_C, SecondChosenInteriorMesh) == 0x0003C0, "Member 'ABP_veh_mi_24_C::SecondChosenInteriorMesh' has a wrong offset!");

}

