#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "PoseSearch_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PoseSearch.PoseSearchFeatureChannel
// 0x0020 (0x0048 - 0x0028)
class UPoseSearchFeatureChannel : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChannelIdx;                                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ChannelDataOffset;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ChannelCardinality;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel">();
	}
	static class UPoseSearchFeatureChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel");
static_assert(sizeof(UPoseSearchFeatureChannel) == 0x000048, "Wrong size on UPoseSearchFeatureChannel");
static_assert(offsetof(UPoseSearchFeatureChannel, ChannelIdx) == 0x000038, "Member 'UPoseSearchFeatureChannel::ChannelIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel, ChannelDataOffset) == 0x00003C, "Member 'UPoseSearchFeatureChannel::ChannelDataOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel, ChannelCardinality) == 0x000040, "Member 'UPoseSearchFeatureChannel::ChannelCardinality' has a wrong offset!");

// Class PoseSearch.PoseSearchSchema
// 0x0088 (0x00B8 - 0x0030)
class UPoseSearchSchema final : public UDataAsset
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPoseSearchFeatureChannel*>      Channels;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMirrorDataTable*                       MirrorDataTable;                                   // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPoseSearchDataPreprocessor                   DataPreprocessor;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SchemaCardinality;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBoneReference>                 BoneReferences;                                    // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint16>                                BoneIndices;                                       // 0x0078(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<uint16>                                BoneIndicesWithParents;                            // 0x0088(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         ContinuingPoseCostBias;                            // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseCostBias;                                      // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MirrorMismatchCostBias;                            // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SequenceEndExlusionTime;                           // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPoseSearchSchemaColorPreset>   ColorPresets;                                      // 0x00A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchSchema">();
	}
	static class UPoseSearchSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchSchema>();
	}
};
static_assert(alignof(UPoseSearchSchema) == 0x000008, "Wrong alignment on UPoseSearchSchema");
static_assert(sizeof(UPoseSearchSchema) == 0x0000B8, "Wrong size on UPoseSearchSchema");
static_assert(offsetof(UPoseSearchSchema, Skeleton) == 0x000038, "Member 'UPoseSearchSchema::Skeleton' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, SampleRate) == 0x000040, "Member 'UPoseSearchSchema::SampleRate' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, Channels) == 0x000048, "Member 'UPoseSearchSchema::Channels' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, MirrorDataTable) == 0x000058, "Member 'UPoseSearchSchema::MirrorDataTable' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, DataPreprocessor) == 0x000060, "Member 'UPoseSearchSchema::DataPreprocessor' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, SchemaCardinality) == 0x000064, "Member 'UPoseSearchSchema::SchemaCardinality' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, BoneReferences) == 0x000068, "Member 'UPoseSearchSchema::BoneReferences' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, BoneIndices) == 0x000078, "Member 'UPoseSearchSchema::BoneIndices' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, BoneIndicesWithParents) == 0x000088, "Member 'UPoseSearchSchema::BoneIndicesWithParents' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, ContinuingPoseCostBias) == 0x000098, "Member 'UPoseSearchSchema::ContinuingPoseCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, BaseCostBias) == 0x00009C, "Member 'UPoseSearchSchema::BaseCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, MirrorMismatchCostBias) == 0x0000A0, "Member 'UPoseSearchSchema::MirrorMismatchCostBias' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, SequenceEndExlusionTime) == 0x0000A4, "Member 'UPoseSearchSchema::SequenceEndExlusionTime' has a wrong offset!");
static_assert(offsetof(UPoseSearchSchema, ColorPresets) == 0x0000A8, "Member 'UPoseSearchSchema::ColorPresets' has a wrong offset!");

// Class PoseSearch.NormalizationSetAsset
// 0x0018 (0x0048 - 0x0030)
class UNormalizationSetAsset final : public UDataAsset
{
public:
	TArray<class UPoseSearchDatabase*>            Databases;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bShouldResetOnSave;                                // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NormalizationSetAsset">();
	}
	static class UNormalizationSetAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNormalizationSetAsset>();
	}
};
static_assert(alignof(UNormalizationSetAsset) == 0x000008, "Wrong alignment on UNormalizationSetAsset");
static_assert(sizeof(UNormalizationSetAsset) == 0x000048, "Wrong size on UNormalizationSetAsset");
static_assert(offsetof(UNormalizationSetAsset, Databases) == 0x000030, "Member 'UNormalizationSetAsset::Databases' has a wrong offset!");
static_assert(offsetof(UNormalizationSetAsset, bShouldResetOnSave) == 0x000040, "Member 'UNormalizationSetAsset::bShouldResetOnSave' has a wrong offset!");

// Class PoseSearch.PoseSearchSearchableAsset
// 0x0000 (0x0030 - 0x0030)
class UPoseSearchSearchableAsset : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchSearchableAsset">();
	}
	static class UPoseSearchSearchableAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchSearchableAsset>();
	}
};
static_assert(alignof(UPoseSearchSearchableAsset) == 0x000008, "Wrong alignment on UPoseSearchSearchableAsset");
static_assert(sizeof(UPoseSearchSearchableAsset) == 0x000030, "Wrong size on UPoseSearchSearchableAsset");

// Class PoseSearch.PoseSearchDatabase
// 0x0120 (0x0150 - 0x0030)
class UPoseSearchDatabase final : public UPoseSearchSearchableAsset
{
public:
	class UPoseSearchSchema*                      Schema;                                            // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchExtrapolationParameters     ExtrapolationParameters;                           // 0x0038(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchExcludeFromDatabaseParameters ExcludeFromDatabaseParameters;                     // 0x0044(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseSearchDatabaseSequence>    Sequences;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseSearchDatabaseBlendSpace>  BlendSpaces;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EPoseSearchMode                               PoseSearchMode;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfPrincipalComponents;                       // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KDTreeMaxLeafSize;                                 // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KDTreeQueryNumNeighbors;                           // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipSearchIfPossible;                             // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNormalizationSetAsset*                 NormalizationSet;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPoseSearchProceduralMovementSteeringSettings SteeringSettings;                                  // 0x0090(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseSearchIndex                       SearchIndexPrivate;                                // 0x0098(0x00B8)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchDatabase">();
	}
	static class UPoseSearchDatabase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchDatabase>();
	}
};
static_assert(alignof(UPoseSearchDatabase) == 0x000008, "Wrong alignment on UPoseSearchDatabase");
static_assert(sizeof(UPoseSearchDatabase) == 0x000150, "Wrong size on UPoseSearchDatabase");
static_assert(offsetof(UPoseSearchDatabase, Schema) == 0x000030, "Member 'UPoseSearchDatabase::Schema' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, ExtrapolationParameters) == 0x000038, "Member 'UPoseSearchDatabase::ExtrapolationParameters' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, ExcludeFromDatabaseParameters) == 0x000044, "Member 'UPoseSearchDatabase::ExcludeFromDatabaseParameters' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, Sequences) == 0x000050, "Member 'UPoseSearchDatabase::Sequences' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, BlendSpaces) == 0x000060, "Member 'UPoseSearchDatabase::BlendSpaces' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, PoseSearchMode) == 0x000070, "Member 'UPoseSearchDatabase::PoseSearchMode' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, NumberOfPrincipalComponents) == 0x000074, "Member 'UPoseSearchDatabase::NumberOfPrincipalComponents' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, KDTreeMaxLeafSize) == 0x000078, "Member 'UPoseSearchDatabase::KDTreeMaxLeafSize' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, KDTreeQueryNumNeighbors) == 0x00007C, "Member 'UPoseSearchDatabase::KDTreeQueryNumNeighbors' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, bSkipSearchIfPossible) == 0x000080, "Member 'UPoseSearchDatabase::bSkipSearchIfPossible' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, NormalizationSet) == 0x000088, "Member 'UPoseSearchDatabase::NormalizationSet' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, SteeringSettings) == 0x000090, "Member 'UPoseSearchDatabase::SteeringSettings' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabase, SearchIndexPrivate) == 0x000098, "Member 'UPoseSearchDatabase::SearchIndexPrivate' has a wrong offset!");

// Class PoseSearch.PoseSearchDatabaseSet
// 0x0018 (0x0048 - 0x0030)
class UPoseSearchDatabaseSet final : public UPoseSearchSearchableAsset
{
public:
	TArray<struct FPoseSearchDatabaseSetEntry>    AssetsToSearch;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bEvaluateContinuingPoseFirst;                      // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchDatabaseSet">();
	}
	static class UPoseSearchDatabaseSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchDatabaseSet>();
	}
};
static_assert(alignof(UPoseSearchDatabaseSet) == 0x000008, "Wrong alignment on UPoseSearchDatabaseSet");
static_assert(sizeof(UPoseSearchDatabaseSet) == 0x000048, "Wrong size on UPoseSearchDatabaseSet");
static_assert(offsetof(UPoseSearchDatabaseSet, AssetsToSearch) == 0x000030, "Member 'UPoseSearchDatabaseSet::AssetsToSearch' has a wrong offset!");
static_assert(offsetof(UPoseSearchDatabaseSet, bEvaluateContinuingPoseFirst) == 0x000040, "Member 'UPoseSearchDatabaseSet::bEvaluateContinuingPoseFirst' has a wrong offset!");

// Class PoseSearch.AnimNotifyState_PoseSearchBase
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchBase : public UAnimNotifyState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchBase">();
	}
	static class UAnimNotifyState_PoseSearchBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchBase>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchBase) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchBase");
static_assert(sizeof(UAnimNotifyState_PoseSearchBase) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchBase");

// Class PoseSearch.AnimNotifyState_PoseSearchExcludeFromDatabase
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchExcludeFromDatabase final : public UAnimNotifyState_PoseSearchBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchExcludeFromDatabase">();
	}
	static class UAnimNotifyState_PoseSearchExcludeFromDatabase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchExcludeFromDatabase>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchExcludeFromDatabase) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchExcludeFromDatabase");
static_assert(sizeof(UAnimNotifyState_PoseSearchExcludeFromDatabase) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchExcludeFromDatabase");

// Class PoseSearch.AnimNotifyState_PoseSearchBlockTransition
// 0x0000 (0x0030 - 0x0030)
class UAnimNotifyState_PoseSearchBlockTransition : public UAnimNotifyState_PoseSearchBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchBlockTransition">();
	}
	static class UAnimNotifyState_PoseSearchBlockTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchBlockTransition>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchBlockTransition) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchBlockTransition");
static_assert(sizeof(UAnimNotifyState_PoseSearchBlockTransition) == 0x000030, "Wrong size on UAnimNotifyState_PoseSearchBlockTransition");

// Class PoseSearch.AnimNotifyState_PoseSearchModifyCost
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_PoseSearchModifyCost final : public UAnimNotifyState_PoseSearchBase
{
public:
	float                                         CostAddend;                                        // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchModifyCost">();
	}
	static class UAnimNotifyState_PoseSearchModifyCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchModifyCost>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchModifyCost) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchModifyCost");
static_assert(sizeof(UAnimNotifyState_PoseSearchModifyCost) == 0x000038, "Wrong size on UAnimNotifyState_PoseSearchModifyCost");
static_assert(offsetof(UAnimNotifyState_PoseSearchModifyCost, CostAddend) == 0x000030, "Member 'UAnimNotifyState_PoseSearchModifyCost::CostAddend' has a wrong offset!");

// Class PoseSearch.AnimNotifyState_PoseSearchOverrideContinuingPoseCostBias
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias final : public UAnimNotifyState_PoseSearchBase
{
public:
	float                                         CostAddend;                                        // 0x0030(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_PoseSearchOverrideContinuingPoseCostBias">();
	}
	static class UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias>();
	}
};
static_assert(alignof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias) == 0x000008, "Wrong alignment on UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias");
static_assert(sizeof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias) == 0x000038, "Wrong size on UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias");
static_assert(offsetof(UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias, CostAddend) == 0x000030, "Member 'UAnimNotifyState_PoseSearchOverrideContinuingPoseCostBias::CostAddend' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Position
// 0x0028 (0x0070 - 0x0048)
class UPoseSearchFeatureChannel_Position final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColorPresetIndex;                                  // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSampleTimeOffsetRootBone;                      // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Position">();
	}
	static class UPoseSearchFeatureChannel_Position* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Position>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Position) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Position");
static_assert(sizeof(UPoseSearchFeatureChannel_Position) == 0x000070, "Wrong size on UPoseSearchFeatureChannel_Position");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, bone) == 0x000048, "Member 'UPoseSearchFeatureChannel_Position::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, Weight) == 0x000058, "Member 'UPoseSearchFeatureChannel_Position::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SampleTimeOffset) == 0x00005C, "Member 'UPoseSearchFeatureChannel_Position::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, SchemaBoneIdx) == 0x000060, "Member 'UPoseSearchFeatureChannel_Position::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, ColorPresetIndex) == 0x000064, "Member 'UPoseSearchFeatureChannel_Position::ColorPresetIndex' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, InputQueryPose) == 0x000068, "Member 'UPoseSearchFeatureChannel_Position::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Position, bUseSampleTimeOffsetRootBone) == 0x000069, "Member 'UPoseSearchFeatureChannel_Position::bUseSampleTimeOffsetRootBone' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Heading
// 0x0028 (0x0070 - 0x0048)
class UPoseSearchFeatureChannel_Heading final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         bone;                                              // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SampleTimeOffset;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeadingAxis                                  HeadingAxis;                                       // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColorPresetIndex;                                  // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSampleTimeOffsetRootBone;                      // 0x0069(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Heading">();
	}
	static class UPoseSearchFeatureChannel_Heading* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Heading>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Heading) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Heading");
static_assert(sizeof(UPoseSearchFeatureChannel_Heading) == 0x000070, "Wrong size on UPoseSearchFeatureChannel_Heading");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, bone) == 0x000048, "Member 'UPoseSearchFeatureChannel_Heading::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, Weight) == 0x000058, "Member 'UPoseSearchFeatureChannel_Heading::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SampleTimeOffset) == 0x00005C, "Member 'UPoseSearchFeatureChannel_Heading::SampleTimeOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, HeadingAxis) == 0x000060, "Member 'UPoseSearchFeatureChannel_Heading::HeadingAxis' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, SchemaBoneIdx) == 0x000061, "Member 'UPoseSearchFeatureChannel_Heading::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, ColorPresetIndex) == 0x000064, "Member 'UPoseSearchFeatureChannel_Heading::ColorPresetIndex' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, InputQueryPose) == 0x000068, "Member 'UPoseSearchFeatureChannel_Heading::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Heading, bUseSampleTimeOffsetRootBone) == 0x000069, "Member 'UPoseSearchFeatureChannel_Heading::bUseSampleTimeOffsetRootBone' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Pose
// 0x0040 (0x0088 - 0x0048)
class UPoseSearchFeatureChannel_Pose final : public UPoseSearchFeatureChannel
{
public:
	float                                         Weight;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseSearchBone>                SampledBones;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 SampleTimes;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int8>                                  SchemaBoneIdx;                                     // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Pose">();
	}
	static class UPoseSearchFeatureChannel_Pose* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Pose>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Pose) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Pose");
static_assert(sizeof(UPoseSearchFeatureChannel_Pose) == 0x000088, "Wrong size on UPoseSearchFeatureChannel_Pose");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, Weight) == 0x000048, "Member 'UPoseSearchFeatureChannel_Pose::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SampledBones) == 0x000050, "Member 'UPoseSearchFeatureChannel_Pose::SampledBones' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SampleTimes) == 0x000060, "Member 'UPoseSearchFeatureChannel_Pose::SampleTimes' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, SchemaBoneIdx) == 0x000070, "Member 'UPoseSearchFeatureChannel_Pose::SchemaBoneIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Pose, InputQueryPose) == 0x000080, "Member 'UPoseSearchFeatureChannel_Pose::InputQueryPose' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_Trajectory
// 0x0018 (0x0060 - 0x0048)
class UPoseSearchFeatureChannel_Trajectory final : public UPoseSearchFeatureChannel
{
public:
	EPoseSearchFeatureDomain                      Domain;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPoseSearchTrajectorySample>    Samples;                                           // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_Trajectory">();
	}
	static class UPoseSearchFeatureChannel_Trajectory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_Trajectory>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_Trajectory) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_Trajectory");
static_assert(sizeof(UPoseSearchFeatureChannel_Trajectory) == 0x000060, "Wrong size on UPoseSearchFeatureChannel_Trajectory");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, Domain) == 0x000048, "Member 'UPoseSearchFeatureChannel_Trajectory::Domain' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, Weight) == 0x00004C, "Member 'UPoseSearchFeatureChannel_Trajectory::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_Trajectory, Samples) == 0x000050, "Member 'UPoseSearchFeatureChannel_Trajectory::Samples' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_FilterCrashingLegs
// 0x0050 (0x0098 - 0x0048)
class UPoseSearchFeatureChannel_FilterCrashingLegs final : public UPoseSearchFeatureChannel
{
public:
	struct FBoneReference                         LeftThigh;                                         // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightThigh;                                        // 0x0058(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         LeftFoot;                                          // 0x0068(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FBoneReference                         RightFoot;                                         // 0x0078(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          LeftThighIdx;                                      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RightThighIdx;                                     // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          LeftFootIdx;                                       // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          RightFootIdx;                                      // 0x008F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputQueryPose                               InputQueryPose;                                    // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AllowedTolerance;                                  // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_FilterCrashingLegs">();
	}
	static class UPoseSearchFeatureChannel_FilterCrashingLegs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_FilterCrashingLegs>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_FilterCrashingLegs) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_FilterCrashingLegs");
static_assert(sizeof(UPoseSearchFeatureChannel_FilterCrashingLegs) == 0x000098, "Wrong size on UPoseSearchFeatureChannel_FilterCrashingLegs");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftThigh) == 0x000048, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftThigh' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightThigh) == 0x000058, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightThigh' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftFoot) == 0x000068, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftFoot' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightFoot) == 0x000078, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightFoot' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, Weight) == 0x000088, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftThighIdx) == 0x00008C, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftThighIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightThighIdx) == 0x00008D, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightThighIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, LeftFootIdx) == 0x00008E, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::LeftFootIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, RightFootIdx) == 0x00008F, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::RightFootIdx' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, InputQueryPose) == 0x000090, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::InputQueryPose' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_FilterCrashingLegs, AllowedTolerance) == 0x000094, "Member 'UPoseSearchFeatureChannel_FilterCrashingLegs::AllowedTolerance' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_RemainingDistance
// 0x0018 (0x0060 - 0x0048)
class UPoseSearchFeatureChannel_RemainingDistance final : public UPoseSearchFeatureChannel
{
public:
	float                                         Weight;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceOffset;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToNotExlcudeIdle;                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseAccumulatedDistance;                     // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialSampleDistanceOffset;                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_RemainingDistance">();
	}
	static class UPoseSearchFeatureChannel_RemainingDistance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_RemainingDistance>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_RemainingDistance) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_RemainingDistance");
static_assert(sizeof(UPoseSearchFeatureChannel_RemainingDistance) == 0x000060, "Wrong size on UPoseSearchFeatureChannel_RemainingDistance");
static_assert(offsetof(UPoseSearchFeatureChannel_RemainingDistance, Weight) == 0x000048, "Member 'UPoseSearchFeatureChannel_RemainingDistance::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_RemainingDistance, DistanceOffset) == 0x00004C, "Member 'UPoseSearchFeatureChannel_RemainingDistance::DistanceOffset' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_RemainingDistance, DistanceToNotExlcudeIdle) == 0x000050, "Member 'UPoseSearchFeatureChannel_RemainingDistance::DistanceToNotExlcudeIdle' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_RemainingDistance, bShouldUseAccumulatedDistance) == 0x000054, "Member 'UPoseSearchFeatureChannel_RemainingDistance::bShouldUseAccumulatedDistance' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_RemainingDistance, InitialSampleDistanceOffset) == 0x000058, "Member 'UPoseSearchFeatureChannel_RemainingDistance::InitialSampleDistanceOffset' has a wrong offset!");

// Class PoseSearch.PoseSearchFeatureChannel_BoneRotation
// 0x0050 (0x0098 - 0x0048)
class UPoseSearchFeatureChannel_BoneRotation final : public UPoseSearchFeatureChannel
{
public:
	float                                         Weight;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         bone;                                              // 0x004C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPoseSearchBoneRotationSample>  Samples;                                           // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseSearchKeepRootRotationSample> KeepRootRotationSamples;                           // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPoseSearchBoneRotationFilter>  FilterAngleSamples;                                // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int8                                          SchemaBoneIdx;                                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoseSearchFeatureChannel_BoneRotation">();
	}
	static class UPoseSearchFeatureChannel_BoneRotation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoseSearchFeatureChannel_BoneRotation>();
	}
};
static_assert(alignof(UPoseSearchFeatureChannel_BoneRotation) == 0x000008, "Wrong alignment on UPoseSearchFeatureChannel_BoneRotation");
static_assert(sizeof(UPoseSearchFeatureChannel_BoneRotation) == 0x000098, "Wrong size on UPoseSearchFeatureChannel_BoneRotation");
static_assert(offsetof(UPoseSearchFeatureChannel_BoneRotation, Weight) == 0x000048, "Member 'UPoseSearchFeatureChannel_BoneRotation::Weight' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_BoneRotation, bone) == 0x00004C, "Member 'UPoseSearchFeatureChannel_BoneRotation::bone' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_BoneRotation, Samples) == 0x000060, "Member 'UPoseSearchFeatureChannel_BoneRotation::Samples' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_BoneRotation, KeepRootRotationSamples) == 0x000070, "Member 'UPoseSearchFeatureChannel_BoneRotation::KeepRootRotationSamples' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_BoneRotation, FilterAngleSamples) == 0x000080, "Member 'UPoseSearchFeatureChannel_BoneRotation::FilterAngleSamples' has a wrong offset!");
static_assert(offsetof(UPoseSearchFeatureChannel_BoneRotation, SchemaBoneIdx) == 0x000090, "Member 'UPoseSearchFeatureChannel_BoneRotation::SchemaBoneIdx' has a wrong offset!");

}

