#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSCLoadingScreen

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"
#include "GSCLoadingScreen_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class GSCLoadingScreen.DisclaimerWidget
// 0x0060 (0x01B0 - 0x0150)
class UDisclaimerWidget final : public UWidget
{
public:
	uint8                                         Pad_150[0x60];                                     // 0x0150(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DisclaimerWidget">();
	}
	static class UDisclaimerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDisclaimerWidget>();
	}
};
static_assert(alignof(UDisclaimerWidget) == 0x000008, "Wrong alignment on UDisclaimerWidget");
static_assert(sizeof(UDisclaimerWidget) == 0x0001B0, "Wrong size on UDisclaimerWidget");

// Class GSCLoadingScreen.GSCLoadingScreenSettings
// 0x00B0 (0x00E8 - 0x0038)
class UGSCLoadingScreenSettings final : public UDeveloperSettings
{
public:
	TArray<struct FScreenData>                    ScreenDataList;                                    // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FScreenOrder>                   ScreenOrder;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDisclaimerData>                DisclaimerScreens;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                         CurrentDisclaimerID;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinShowTime;                                       // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Arrow;                                             // 0x0078(0x0020)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Background;                                        // 0x0098(0x0020)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LoadingScreenIndicatorBackgroundSize;              // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                LoadArrowPadding;                                  // 0x00C8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              LoadArrowRotation;                                 // 0x00D8(0x0010)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GSCLoadingScreenSettings">();
	}
	static class UGSCLoadingScreenSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGSCLoadingScreenSettings>();
	}
};
static_assert(alignof(UGSCLoadingScreenSettings) == 0x000008, "Wrong alignment on UGSCLoadingScreenSettings");
static_assert(sizeof(UGSCLoadingScreenSettings) == 0x0000E8, "Wrong size on UGSCLoadingScreenSettings");
static_assert(offsetof(UGSCLoadingScreenSettings, ScreenDataList) == 0x000038, "Member 'UGSCLoadingScreenSettings::ScreenDataList' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, ScreenOrder) == 0x000048, "Member 'UGSCLoadingScreenSettings::ScreenOrder' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, DisclaimerScreens) == 0x000058, "Member 'UGSCLoadingScreenSettings::DisclaimerScreens' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, CurrentDisclaimerID) == 0x000068, "Member 'UGSCLoadingScreenSettings::CurrentDisclaimerID' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, FadeInDuration) == 0x00006C, "Member 'UGSCLoadingScreenSettings::FadeInDuration' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, FadeOutDuration) == 0x000070, "Member 'UGSCLoadingScreenSettings::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, MinShowTime) == 0x000074, "Member 'UGSCLoadingScreenSettings::MinShowTime' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, Arrow) == 0x000078, "Member 'UGSCLoadingScreenSettings::Arrow' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, Background) == 0x000098, "Member 'UGSCLoadingScreenSettings::Background' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, LoadingScreenIndicatorBackgroundSize) == 0x0000B8, "Member 'UGSCLoadingScreenSettings::LoadingScreenIndicatorBackgroundSize' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, LoadArrowPadding) == 0x0000C8, "Member 'UGSCLoadingScreenSettings::LoadArrowPadding' has a wrong offset!");
static_assert(offsetof(UGSCLoadingScreenSettings, LoadArrowRotation) == 0x0000D8, "Member 'UGSCLoadingScreenSettings::LoadArrowRotation' has a wrong offset!");

}

