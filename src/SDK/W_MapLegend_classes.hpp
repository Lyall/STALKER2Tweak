#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MapLegend

#include "Basic.hpp"

#include "Stalker2_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_MapLegend.W_MapLegend_C
// 0x00C0 (0x0380 - 0x02C0)
class UW_MapLegend_C final : public UMapLegend
{
public:
	class UW_MapLegendNote_C*                     Anomaly;                                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Archianomaly;                                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Background;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Bed;                                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Camp;                                              // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Dangerous;                                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     FollowLandmark;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Guide;                                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Habar;                                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     HubLeader;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              LegendDescription;                                 // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Location;                                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     MainQuest;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     MainQuestGiver;                                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Mechanical;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Medecine;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     PartyLeader;                                       // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Radiation;                                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     SideQuest;                                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     SideQuestGiver;                                    // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Stashes;                                           // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Storage;                                           // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Trader;                                            // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLegendNote_C*                     Unknown;                                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_MapLegend_C">();
	}
	static class UW_MapLegend_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_MapLegend_C>();
	}
};
static_assert(alignof(UW_MapLegend_C) == 0x000008, "Wrong alignment on UW_MapLegend_C");
static_assert(sizeof(UW_MapLegend_C) == 0x000380, "Wrong size on UW_MapLegend_C");
static_assert(offsetof(UW_MapLegend_C, Anomaly) == 0x0002C0, "Member 'UW_MapLegend_C::Anomaly' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Archianomaly) == 0x0002C8, "Member 'UW_MapLegend_C::Archianomaly' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Background) == 0x0002D0, "Member 'UW_MapLegend_C::Background' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Bed) == 0x0002D8, "Member 'UW_MapLegend_C::Bed' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Camp) == 0x0002E0, "Member 'UW_MapLegend_C::Camp' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Dangerous) == 0x0002E8, "Member 'UW_MapLegend_C::Dangerous' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, FollowLandmark) == 0x0002F0, "Member 'UW_MapLegend_C::FollowLandmark' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Guide) == 0x0002F8, "Member 'UW_MapLegend_C::Guide' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Habar) == 0x000300, "Member 'UW_MapLegend_C::Habar' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, HubLeader) == 0x000308, "Member 'UW_MapLegend_C::HubLeader' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, LegendDescription) == 0x000310, "Member 'UW_MapLegend_C::LegendDescription' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Location) == 0x000318, "Member 'UW_MapLegend_C::Location' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, MainQuest) == 0x000320, "Member 'UW_MapLegend_C::MainQuest' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, MainQuestGiver) == 0x000328, "Member 'UW_MapLegend_C::MainQuestGiver' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Mechanical) == 0x000330, "Member 'UW_MapLegend_C::Mechanical' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Medecine) == 0x000338, "Member 'UW_MapLegend_C::Medecine' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, PartyLeader) == 0x000340, "Member 'UW_MapLegend_C::PartyLeader' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Radiation) == 0x000348, "Member 'UW_MapLegend_C::Radiation' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, SideQuest) == 0x000350, "Member 'UW_MapLegend_C::SideQuest' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, SideQuestGiver) == 0x000358, "Member 'UW_MapLegend_C::SideQuestGiver' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Stashes) == 0x000360, "Member 'UW_MapLegend_C::Stashes' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Storage) == 0x000368, "Member 'UW_MapLegend_C::Storage' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Trader) == 0x000370, "Member 'UW_MapLegend_C::Trader' has a wrong offset!");
static_assert(offsetof(UW_MapLegend_C, Unknown) == 0x000378, "Member 'UW_MapLegend_C::Unknown' has a wrong offset!");

}

