#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearchLocomotion

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// ScriptStruct PoseSearchLocomotion.PoseSearchLocomotionMoveData
// 0x0030 (0x0030 - 0x0000)
struct FPoseSearchLocomotionMoveData final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   SubTags;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseStrafe;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveBehaviorTransitionUseTime;                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveBehaviorOnlyTransitionUseTime;                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearSpeedUnitsPerSecond;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictionTimeHorizonSeconds;                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictionDistanceHorizonUnits;                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchLocomotionMoveData) == 0x000008, "Wrong alignment on FPoseSearchLocomotionMoveData");
static_assert(sizeof(FPoseSearchLocomotionMoveData) == 0x000030, "Wrong size on FPoseSearchLocomotionMoveData");
static_assert(offsetof(FPoseSearchLocomotionMoveData, Tag) == 0x000000, "Member 'FPoseSearchLocomotionMoveData::Tag' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMoveData, SubTags) == 0x000008, "Member 'FPoseSearchLocomotionMoveData::SubTags' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMoveData, bUseStrafe) == 0x000018, "Member 'FPoseSearchLocomotionMoveData::bUseStrafe' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMoveData, MoveBehaviorTransitionUseTime) == 0x00001C, "Member 'FPoseSearchLocomotionMoveData::MoveBehaviorTransitionUseTime' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMoveData, MoveBehaviorOnlyTransitionUseTime) == 0x000020, "Member 'FPoseSearchLocomotionMoveData::MoveBehaviorOnlyTransitionUseTime' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMoveData, LinearSpeedUnitsPerSecond) == 0x000024, "Member 'FPoseSearchLocomotionMoveData::LinearSpeedUnitsPerSecond' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMoveData, PredictionTimeHorizonSeconds) == 0x000028, "Member 'FPoseSearchLocomotionMoveData::PredictionTimeHorizonSeconds' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMoveData, PredictionDistanceHorizonUnits) == 0x00002C, "Member 'FPoseSearchLocomotionMoveData::PredictionDistanceHorizonUnits' has a wrong offset!");

// ScriptStruct PoseSearchLocomotion.PoseSearchLocomotionTrajectorySettings
// 0x0060 (0x0060 - 0x0000)
struct FPoseSearchLocomotionTrajectorySettings final
{
public:
	float                                         SampleRate;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistoryExpirationSeconds;                          // 0x0004(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      HistoryExpirationSecondsByAgent;                   // 0x0008(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         TransitionTimeSeconds;                             // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPoseSearchLocomotionTrajectorySettings) == 0x000008, "Wrong alignment on FPoseSearchLocomotionTrajectorySettings");
static_assert(sizeof(FPoseSearchLocomotionTrajectorySettings) == 0x000060, "Wrong size on FPoseSearchLocomotionTrajectorySettings");
static_assert(offsetof(FPoseSearchLocomotionTrajectorySettings, SampleRate) == 0x000000, "Member 'FPoseSearchLocomotionTrajectorySettings::SampleRate' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionTrajectorySettings, HistoryExpirationSeconds) == 0x000004, "Member 'FPoseSearchLocomotionTrajectorySettings::HistoryExpirationSeconds' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionTrajectorySettings, HistoryExpirationSecondsByAgent) == 0x000008, "Member 'FPoseSearchLocomotionTrajectorySettings::HistoryExpirationSecondsByAgent' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionTrajectorySettings, TransitionTimeSeconds) == 0x000058, "Member 'FPoseSearchLocomotionTrajectorySettings::TransitionTimeSeconds' has a wrong offset!");

// ScriptStruct PoseSearchLocomotion.PoseSearchLocomotionAlternativeTags
// 0x0010 (0x0010 - 0x0000)
struct FPoseSearchLocomotionAlternativeTags final
{
public:
	TArray<struct FGameplayTag>                   Tags;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchLocomotionAlternativeTags) == 0x000008, "Wrong alignment on FPoseSearchLocomotionAlternativeTags");
static_assert(sizeof(FPoseSearchLocomotionAlternativeTags) == 0x000010, "Wrong size on FPoseSearchLocomotionAlternativeTags");
static_assert(offsetof(FPoseSearchLocomotionAlternativeTags, Tags) == 0x000000, "Member 'FPoseSearchLocomotionAlternativeTags::Tags' has a wrong offset!");

// ScriptStruct PoseSearchLocomotion.PoseSearchLocomotionMovementSettings
// 0x0188 (0x0188 - 0x0000)
struct FPoseSearchLocomotionMovementSettings final
{
public:
	TMap<struct FGameplayTag, struct FPoseSearchLocomotionAlternativeTags> AlternativeTags;                                   // 0x0000(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FGameplayTagContainer> ComplimentaryTags;                                 // 0x0050(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	float                                         CorridorWidth;                                     // 0x00A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      CorridorWidthByAgentType;                          // 0x00A8(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bSimplifyFlipPortals;                              // 0x00F8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyConvexPortals;                            // 0x00F9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSimplifyConcavePortals;                           // 0x00FA(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB[0x1];                                       // 0x00FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CorridorPathOffset;                                // 0x00FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorridorStartOffset;                               // 0x0100(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NarrowFromEndDistance;                             // 0x0104(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleSteeringRotationRateDegreesPerSecond;          // 0x0108(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkSteeringRotationRateDegreesPerSecond;          // 0x010C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunSteeringRotationRateDegreesPerSecond;           // 0x0110(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintSteeringRotationRateDegreesPerSecond;        // 0x0114(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EvadeSteeringRotationRateDegreesPerSecond;         // 0x0118(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnappingToPathEndStartDistance;                    // 0x011C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnappingToPathEndRatio;                            // 0x0120(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnappingToPathEndMinVelocity;                      // 0x0124(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RunTags;                                           // 0x0128(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SprintTags;                                        // 0x0148(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MoveBehaviourTransitionTags;                       // 0x0168(0x0020)(Edit, Config, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoseSearchLocomotionMovementSettings) == 0x000008, "Wrong alignment on FPoseSearchLocomotionMovementSettings");
static_assert(sizeof(FPoseSearchLocomotionMovementSettings) == 0x000188, "Wrong size on FPoseSearchLocomotionMovementSettings");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, AlternativeTags) == 0x000000, "Member 'FPoseSearchLocomotionMovementSettings::AlternativeTags' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, ComplimentaryTags) == 0x000050, "Member 'FPoseSearchLocomotionMovementSettings::ComplimentaryTags' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, CorridorWidth) == 0x0000A0, "Member 'FPoseSearchLocomotionMovementSettings::CorridorWidth' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, CorridorWidthByAgentType) == 0x0000A8, "Member 'FPoseSearchLocomotionMovementSettings::CorridorWidthByAgentType' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, bSimplifyFlipPortals) == 0x0000F8, "Member 'FPoseSearchLocomotionMovementSettings::bSimplifyFlipPortals' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, bSimplifyConvexPortals) == 0x0000F9, "Member 'FPoseSearchLocomotionMovementSettings::bSimplifyConvexPortals' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, bSimplifyConcavePortals) == 0x0000FA, "Member 'FPoseSearchLocomotionMovementSettings::bSimplifyConcavePortals' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, CorridorPathOffset) == 0x0000FC, "Member 'FPoseSearchLocomotionMovementSettings::CorridorPathOffset' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, CorridorStartOffset) == 0x000100, "Member 'FPoseSearchLocomotionMovementSettings::CorridorStartOffset' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, NarrowFromEndDistance) == 0x000104, "Member 'FPoseSearchLocomotionMovementSettings::NarrowFromEndDistance' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, IdleSteeringRotationRateDegreesPerSecond) == 0x000108, "Member 'FPoseSearchLocomotionMovementSettings::IdleSteeringRotationRateDegreesPerSecond' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, WalkSteeringRotationRateDegreesPerSecond) == 0x00010C, "Member 'FPoseSearchLocomotionMovementSettings::WalkSteeringRotationRateDegreesPerSecond' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, RunSteeringRotationRateDegreesPerSecond) == 0x000110, "Member 'FPoseSearchLocomotionMovementSettings::RunSteeringRotationRateDegreesPerSecond' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, SprintSteeringRotationRateDegreesPerSecond) == 0x000114, "Member 'FPoseSearchLocomotionMovementSettings::SprintSteeringRotationRateDegreesPerSecond' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, EvadeSteeringRotationRateDegreesPerSecond) == 0x000118, "Member 'FPoseSearchLocomotionMovementSettings::EvadeSteeringRotationRateDegreesPerSecond' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, SnappingToPathEndStartDistance) == 0x00011C, "Member 'FPoseSearchLocomotionMovementSettings::SnappingToPathEndStartDistance' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, SnappingToPathEndRatio) == 0x000120, "Member 'FPoseSearchLocomotionMovementSettings::SnappingToPathEndRatio' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, SnappingToPathEndMinVelocity) == 0x000124, "Member 'FPoseSearchLocomotionMovementSettings::SnappingToPathEndMinVelocity' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, RunTags) == 0x000128, "Member 'FPoseSearchLocomotionMovementSettings::RunTags' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, SprintTags) == 0x000148, "Member 'FPoseSearchLocomotionMovementSettings::SprintTags' has a wrong offset!");
static_assert(offsetof(FPoseSearchLocomotionMovementSettings, MoveBehaviourTransitionTags) == 0x000168, "Member 'FPoseSearchLocomotionMovementSettings::MoveBehaviourTransitionTags' has a wrong offset!");

}

