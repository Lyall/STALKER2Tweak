#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GSCLoadingScreen

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GSCLoadingScreen.ESplashScreenType
// NumValues: 0x0004
enum class ESplashScreenType : uint8
{
	None                                     = 0,
	Image                                    = 1,
	Disclaimer                               = 2,
	ESplashScreenType_MAX                    = 3,
};

// Enum GSCLoadingScreen.ECustomDisclaimerType
// NumValues: 0x0004
enum class ECustomDisclaimerType : uint8
{
	None                                     = 0,
	Saves                                    = 1,
	Logos                                    = 2,
	ECustomDisclaimerType_MAX                = 3,
};

// ScriptStruct GSCLoadingScreen.ScreenData
// 0x0030 (0x0030 - 0x0000)
struct FScreenData final
{
public:
	float                                         MaxShowTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinShowTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkippable;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        Image;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScreenData) == 0x000008, "Wrong alignment on FScreenData");
static_assert(sizeof(FScreenData) == 0x000030, "Wrong size on FScreenData");
static_assert(offsetof(FScreenData, MaxShowTime) == 0x000000, "Member 'FScreenData::MaxShowTime' has a wrong offset!");
static_assert(offsetof(FScreenData, MinShowTime) == 0x000004, "Member 'FScreenData::MinShowTime' has a wrong offset!");
static_assert(offsetof(FScreenData, bIsSkippable) == 0x000008, "Member 'FScreenData::bIsSkippable' has a wrong offset!");
static_assert(offsetof(FScreenData, Image) == 0x000010, "Member 'FScreenData::Image' has a wrong offset!");

// ScriptStruct GSCLoadingScreen.ScreenOrder
// 0x0030 (0x0030 - 0x0000)
struct FScreenOrder final
{
public:
	ESplashScreenType                             ScreenType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScreenOrderID;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSkippable;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        Image;                                             // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScreenOrder) == 0x000008, "Wrong alignment on FScreenOrder");
static_assert(sizeof(FScreenOrder) == 0x000030, "Wrong size on FScreenOrder");
static_assert(offsetof(FScreenOrder, ScreenType) == 0x000000, "Member 'FScreenOrder::ScreenType' has a wrong offset!");
static_assert(offsetof(FScreenOrder, ScreenOrderID) == 0x000004, "Member 'FScreenOrder::ScreenOrderID' has a wrong offset!");
static_assert(offsetof(FScreenOrder, bIsSkippable) == 0x000008, "Member 'FScreenOrder::bIsSkippable' has a wrong offset!");
static_assert(offsetof(FScreenOrder, Image) == 0x000010, "Member 'FScreenOrder::Image' has a wrong offset!");

// ScriptStruct GSCLoadingScreen.DisclaimerData
// 0x0088 (0x0088 - 0x0000)
struct FDisclaimerData final
{
public:
	class USlateBrushAsset*                       BackgroundBrush;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       HealthFooterLineBrushPath;                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       HealthFooterImageBrushPath;                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       HealthHeaderLineBrushPath;                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 HealthTitleFont;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 HealthTitle2Font;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 HealthDescFont;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 HealthDesc2Font;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleSID;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title2SID;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentSID;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content2SID;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomDisclaimerType                         CustomDisclaimerType;                              // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDisclaimerData) == 0x000008, "Wrong alignment on FDisclaimerData");
static_assert(sizeof(FDisclaimerData) == 0x000088, "Wrong size on FDisclaimerData");
static_assert(offsetof(FDisclaimerData, BackgroundBrush) == 0x000000, "Member 'FDisclaimerData::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, HealthFooterLineBrushPath) == 0x000008, "Member 'FDisclaimerData::HealthFooterLineBrushPath' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, HealthFooterImageBrushPath) == 0x000010, "Member 'FDisclaimerData::HealthFooterImageBrushPath' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, HealthHeaderLineBrushPath) == 0x000018, "Member 'FDisclaimerData::HealthHeaderLineBrushPath' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, HealthTitleFont) == 0x000020, "Member 'FDisclaimerData::HealthTitleFont' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, HealthTitle2Font) == 0x000028, "Member 'FDisclaimerData::HealthTitle2Font' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, HealthDescFont) == 0x000030, "Member 'FDisclaimerData::HealthDescFont' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, HealthDesc2Font) == 0x000038, "Member 'FDisclaimerData::HealthDesc2Font' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, TitleSID) == 0x000040, "Member 'FDisclaimerData::TitleSID' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, Title2SID) == 0x000050, "Member 'FDisclaimerData::Title2SID' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, ContentSID) == 0x000060, "Member 'FDisclaimerData::ContentSID' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, Content2SID) == 0x000070, "Member 'FDisclaimerData::Content2SID' has a wrong offset!");
static_assert(offsetof(FDisclaimerData, CustomDisclaimerType) == 0x000080, "Member 'FDisclaimerData::CustomDisclaimerType' has a wrong offset!");

}

