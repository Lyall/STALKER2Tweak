#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AnimBP_Template

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Stalker2_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AnimBP_Template.AnimBP_Template_C
// 0x0140 (0x0580 - 0x0440)
class UAnimBP_Template_C final : public UAnimInstanceSyncPoint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0440(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Tag;                        // 0x0448(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0450(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0458(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0460(0x0020)()
	struct FAnimNode_CacheBlend_GSC               AnimGraphNode_CacheBlend_GSC;                      // 0x0480(0x0068)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x04E8(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0530(0x0048)()

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void ExecuteUbergraph_AnimBP_Template(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AnimBP_Template_C">();
	}
	static class UAnimBP_Template_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimBP_Template_C>();
	}
};
static_assert(alignof(UAnimBP_Template_C) == 0x000010, "Wrong alignment on UAnimBP_Template_C");
static_assert(sizeof(UAnimBP_Template_C) == 0x000580, "Wrong size on UAnimBP_Template_C");
static_assert(offsetof(UAnimBP_Template_C, UberGraphFrame) == 0x000440, "Member 'UAnimBP_Template_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAnimBP_Template_C, AnimBlueprintExtension_Tag) == 0x000448, "Member 'UAnimBP_Template_C::AnimBlueprintExtension_Tag' has a wrong offset!");
static_assert(offsetof(UAnimBP_Template_C, AnimBlueprintExtension_PropertyAccess) == 0x000450, "Member 'UAnimBP_Template_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAnimBP_Template_C, AnimBlueprintExtension_Base) == 0x000458, "Member 'UAnimBP_Template_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAnimBP_Template_C, AnimGraphNode_Root) == 0x000460, "Member 'UAnimBP_Template_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAnimBP_Template_C, AnimGraphNode_CacheBlend_GSC) == 0x000480, "Member 'UAnimBP_Template_C::AnimGraphNode_CacheBlend_GSC' has a wrong offset!");
static_assert(offsetof(UAnimBP_Template_C, AnimGraphNode_Slot_1) == 0x0004E8, "Member 'UAnimBP_Template_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UAnimBP_Template_C, AnimGraphNode_Slot) == 0x000530, "Member 'UAnimBP_Template_C::AnimGraphNode_Slot' has a wrong offset!");

}

